{"fieldName":"dc.format.extent","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/16613","fieldValue":"{\"startingPage\":\"\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/16613","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/16613","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/16614","fieldValue":" We present a technique for automatically synthesizing walking and running controllers for physically-simulated 3D humanoid characters. The sagittal hip, knee, and ankle degrees-of-freedom are actuated using a set of eight Hill-type musculotendon models in each leg, with biologically-motivated control laws. The parameters of these control laws are set by an optimization procedure that satisfies a number of locomotion task terms while minimizing a biological model of metabolic energy expenditure. We show that the use of biologically-based actuators and objectives measurably increases the realism of gaits generated by locomotion controllers that operate without the use of motion capture data, and that metabolic energy expenditure provides a simple and unifying measurement of effort that can be used for both walking and running control optimization."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/16614","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/16614","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/16615","fieldValue":" We present a physically-based system to simulate and control the locomotion of soft body characters without skeletons. We use the finite element method to simulate the deformation of the soft body, and we instrument a character with muscle fibers to allow it to actively control its shape. To perform locomotion, we use a variety of intuitive controls such as moving a point on the character, specifying the center of mass or the angular momentum, and maintaining balance. These controllers yield an objective function that is passed to our optimization solver, which handles convex quadratic program with linear complementarity constraints. This solver determines the new muscle fiber lengths, and moreover it determines whether each point of contact should remain static, slide, or lift away from the floor. Our system can automatically find an appropriate combination of muscle contractions that enables a soft character to fulfill various locomotion tasks, including walking, jumping, crawling, rolling and balancing."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/16615","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/16615","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2575","fieldValue":" A distance sensitivity oracle of an n-vertex graph G = (V,E) is a data structure that can report shortest paths when edges of the graph fail. A query (u âˆˆ V, v âˆˆ V, S âŠ\u2020 E) to this oracle returns a shortest u-to-v path in the graph $G^â\u20AC² = (V,E &setmn; S). We present randomized (Monte Carlo) algorithms for constructing a distance sensitivity oracle of size Ã\u2022(n3âˆ\u2019Î±) for |S| = O(lg n\/lg lg n) and any choice of 0 < Î± < 1. For real edge-lengths, the oracle is constructed in O(n4âˆ\u2019Î±) time and a query to this oracle takes Ã\u2022(n2âˆ\u20192(1âˆ\u2019Î±)\/|S|) time. For integral edge-lengths in {âˆ\u2019M,..., M}, using the current Ï\u2030 < 2.376 matrix multiplication exponent, the oracle is constructed in O(Mn3.376âˆ\u2019Î±) time with Ã\u2022(n2âˆ\u2019(1âˆ\u2019Î±)\/|S|) query, or alternatively in O(M0.681n3.575âˆ\u2019Î±) time with Ã\u2022(n2âˆ\u20192(1âˆ\u2019Î±)\/|S|) query. Distance sensitivity oracles generalize the replacement paths problem in which u and v are known in advance and |S| = 1. In other words, if P is a shortest path from u to v in G, then the replacement paths problem asks to compute, for every edge e on P, a shortest u-to-v path that avoids e. Our new technique for constructing distance sensitivity oracles using fast matrix multiplication also yields the first subcubic-time algorithm for the replacement paths problem when the edge-lengths are small integers. In particular, it yields a randomized (Monte Carlo) Ã\u2022(Mn2.376 + M2 3 n2.584)-time algorithm for the replacement paths problem assuming M â\u2030¤ n0.624$. Finally, we mention that both our replacement paths algorithm and our distance sensitivity oracle can be made to work, in the same time and space bounds, for the case of failed vertices rather than edges, that is, when S is a set of vertices and we seek a shortest u-to-v path in the graph obtained from G by removing all vertices in S and their adjacent edges."}