{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18671","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18672","fieldValue":" A method of constructing test problems for constrained bivalent quadratic programming is presented. For any feasible integer point for a given domain, the method generates quadratic functions whose minimum over the given domain occurs at the selected point.Certain properties of unconstrained quadratic zero-one programs that determine the difficulty of the test problems are also discussed. In addition, a standardized random test problem generator for unconstrained quadratic zero-one programming is given."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18672","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18672","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18673","fieldValue":" In a given large fixed table of bit-vectors, we would like to find, as rapidly as possible, those bit-vectors which have the least Hamming distances from a newly-presented arbitrary bit-vector."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18673","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18673","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/18674","fieldValue":"LEcuyer, Pierre"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18674","fieldValue":" A portable set of software tools is described for uniform randomvariates generation. It provides for multiple generators runningsimultaneously, and each generator has its sequence of numberspartitioned into many long (disjoint) substreams. Simple procedure callsallow the user to make any generator â\u20ACœjumpâ\u20AC? ahead to thebeginning of its next substream, back to the beginning of its currentsubstream, or back to the beginning of its first substream.â\u20AC¦Implementation issues are discussed.â\u20AC¦A Pascal implementation for32-bit computers is described.â\u20AC\u201D"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18674","fieldValue":"ACM"}