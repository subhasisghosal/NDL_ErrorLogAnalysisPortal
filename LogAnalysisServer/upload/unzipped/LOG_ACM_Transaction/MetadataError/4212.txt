{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/23695","fieldValue":" The layered multilingual input\/output(I\/O) sytems we designed, based on typological studies of major-language writing conventions, unifies common features of such conventions to enable international and local utilization. The internationalization layer input module converts keystroke sequences to phonograms and ideograms. The corresponding output module displays position-independent and dependent characters. The localization layer positions language-specific functions outside the structure, integrating them as tables used by finite automaton interpreters and servers to add new languages and code sets without recompilation.The I\/O system generates and displays stateful and stateless code sets, enabling interactive language switching. Going beyond POSIX locale model bounds, the system generates ISO 2022, ISO\/DIS 10646 (1990), and Compound Text, defined for the interchange encoding format in X11 protocols, for basic polyglot text communication and processing. Able to generate multilingual code sets, the I\/O system clearly demonstrates that code sets should be selected by applications which have purposes beyond selecting one element from a localization set. Functionality and functions related to text manipulation in an operating sytem (OS) must also be determined by such applications.A subset of this I\/O system was implemented in the X window system as a basic use of X11R5 I\/O by supplying basic code set generation and string manipulation to eliminate OS interference. To ensure polyglot string manipulation, the I\/O system must clearly be implemented separately from an OS and its limitations."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/23695","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/23695","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/23696","fieldValue":"Blake, G Elizabeth"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/23696","fieldValue":" Textual databases with highly variable structure can be usefully described by a grammar-defined model. One example of such a text is the Oxford English Dictionary. This paper describes a first attempt to apply technology based on this model to a real problem. A language called GOEDEL, which is a partial implementation of a set of grammar-defined database operators, was used to extract and alter a subset of the OED in order to assist the editors in their production of The Shorter Oxford English Dictionary. The implementation of the pstring data structure to describe a piece of text and the functions that operate on this pstring are illustrated with some detailed examples. The project was judged a success and the resulting program used in production by the Oxford University Press."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/23696","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/23696","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/23697","fieldValue":" The Envoy Framework addresses a need for computer-based assistants or agents that operate in conjunction with users' existing applications, helping them perform tedious, repetitive, or time-consuming tasks more easily and efficiently. Envoys carry out missions for users by invoking envoy-aware applications called operatives and inform users of mission results via envoy-aware applications called informers. The distributed, open architecture developed for Envoys is derived from an analysis of the best characteristics of existing agent systems. This architecture has been designed as a model for how agent technology can be seamlessly integrated into the electronic desktop. It defines a set of application programmer's interfaces so that developers may convert their software to envoy-aware applications. A subset of the architecture described in this paper has been implemented in an Envoy Framework prototype."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/23697","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/23697","fieldValue":"ACM"}