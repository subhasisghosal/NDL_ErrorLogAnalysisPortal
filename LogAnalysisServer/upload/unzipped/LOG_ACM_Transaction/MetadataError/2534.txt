{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2743","fieldValue":" We consider the classic problem of envy-free division of a heterogeneous good (â\u20ACœcakeâ\u20AC?) among several agents. It is known that, when the allotted pieces must be connected, the problem cannot be solved by a finite algorithm for three or more agents. The impossibility result, however, assumes that the entire cake must be allocated. In this article, we replace the entire-allocation requirement with a weaker partial-proportionality requirement: the piece given to each agent must be worth for it at least a certain positive fraction of the entire cake value. We prove that this version of the problem is solvable in bounded time even when the pieces must be connected. We present simple, bounded-time envy-free cake-cutting algorithms for (1) giving each of n agents a connected piece with a positive value; (2) giving each of three agents a connected piece worth at least 1\/3; (3) giving each of four agents a connected piece worth at least 1\/7; (4) giving each of four agents a disconnected piece worth at least 1\/4; and (5) giving each of n agents a disconnected piece worth at least (1 âˆ\u2019 &epsi;)\/n for any positive &epsi;."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2743","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2743","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18558","fieldValue":" Spatial-equilibrium models are the primary framework for applied equilibrium modeling and policy analysis. An effective procedure for solving single commodity problems is described based on a variable dimension, complementary pivoting algorithm of Jones, Saigal, and Schneider. An implementation of this approach called the expanding equilibrium algorithm is described using network data structures and sparse graphs. The data structure that is used presorts the graph to avoid using linked lists while maintaining the flexibility to add arcs to the graph as the algorithm is executing. A computational experiment is developed showing the algorithm's ability to exploit the problem's underlying network and economic structure. Computational results are presented for a computer code written in C and tested on a large-scale, randomly generated problem."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18558","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18558","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18559","fieldValue":" We present FORTRAN subroutines that implement the method described in [3] for the stable evaluation of the weights of interpolatory quadratures with prescribed simple or multiple knots. Given a set of knots and their multiplicities, the package generates the weights by using the zeroth moment Î¼0 of w, the weight function in the integrand, and the (symmetric tridiagonal) Jacobi matrix J associated with the polynomials orthogonal on (a, b) with respect to w. There are utility routines that generate Î¼0 and J for classical weight functions, but quadratures can be generated for any Î¼0 and J supplied by the user. Utility routines are also provided that (1) evaluate a computed quadrature, applied to a user-supplied integrand, (2) check the polynomial order of precision of a quadrature formula, and (3) compute the knots and weights of simple Gaussian quadrature formula."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18559","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18559","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18560","fieldValue":"ACM"}