{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/13323","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/13323","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/13324","fieldValue":"Lee, Ren-Jie"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/13324","fieldValue":"Chen, Hung-Ming"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/13324","fieldValue":" IC-centric design flow has been a common paradigm when designing and optimizing a system. Package and board\/system designs are usually followed by almost-ready chip designs, which causes long turn-around time communicating with package and system houses. In this article, the realizations of area-array I\/O design methodologies are studied. Different from IC-centric flow, we propose a chip-package concurrent design flow to speed up the design time. Along with the flow, we design the I\/O-bump (and P\/G-bump) tile that combines I\/O (and P\/G) and bump into a hard macro with the considerations of I\/O power connection and electrostatic discharge (ESD) protection. We then employ an I\/O-row based scheme to place I\/O-bump tiles with existed metal layers. By such a scheme, it reduces efforts in I\/O placement legalization and the redistribution layer (RDL) routing. With the emphasis on package design awareness, the proposed methods map package balls onto chip I\/Os, thus providing an opportunity to design chip and package in parallel. Due to this early study of I\/O and bump planning, faster convergence can be expected with concurrent design flow. The results are encouraging and the merits of this flow are reassuring."}{"fieldName":"dc.identifier.other","informationCode":"ERR_FORMAT_DOI","handle":"12345678_acm\/13324","fieldValue":"{\"doi\":\"http:\/\/dx.doi.org\/10.1145\/2442087.2442101\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/13324","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/13324","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2270","fieldValue":" Two equal length strings s and sâ\u20AC², over alphabets $Î£_s and Î£sâ\u20AC², parameterize match if there exists a bijection Ï\u20AC : Î£s &rightarrow; Î£s$â\u20AC² such that Ï\u20AC (s) &equals; sâ\u20AC², where Ï\u20AC (s) is the renaming of each character of s via Ï\u20AC. Parameterized matching is the problem of finding all parameterized matches of a pattern string p in a text t, and approximate parameterized matching is the problem of finding at each location a bijection Ï\u20AC that maximizes the number of characters that are mapped from p to the appropriate &verbar;p&verbar;-length substring of t. Parameterized matching was introduced as a model for software duplication detection in software maintenance systems and also has applications in image processing and computational biology. For example, approximate parameterized matching models image searching with variable color maps in the presence of errors. We consider the problem for which an error threshold, k, is given, and the goal is to find all locations in t for which there exists a bijection Ï\u20AC which maps p into the appropriate &verbar;p&verbar;-length substring of t with at most k mismatched mapped elements. Our main result is an algorithm for this problem with $O(nk^1.5 &plus; mk log m) time complexity, where m &equals; &verbar;p&verbar; and n&equals;&verbar;t&verbar;. We also show that when &verbar;p&verbar; &equals; &verbar;t&verbar; &equals; m, the problem is equivalent to the maximum matching problem on graphs, yielding a O(m &plus; k1.5$) solution."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2270","fieldValue":"ACM"}