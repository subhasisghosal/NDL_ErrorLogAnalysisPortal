{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/24708","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/24709","fieldValue":"LEcuyer, Pierre"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/24709","fieldValue":" Marsaglia and Zaman recently proposed new classes of random number generators, called add-with-carry(AWC) and subtract-with-borrow(SWB), which are capable of quickly generating very long-period (pseudo)-random number sequences using very little memory. We show that these sequences are essentially equivalent to linear congruential sequences with very large prime moduli. So, the AWC\/SWB generators can be viewed as efficient ways of implementing such large linear congruential generators. As a consequence, the theoretical properties of such generators can be studied in the same way as for linear congruential generators, namely, via the spectral and lattice tests. We also show how the equivalence can be exploited to implement efficient jumping-ahead facilities for the AWC and SWB sequences. Our numerical examples illustrate the fact that AWC\/SWB generators have extremely bad lattice structure in high dimensions."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/24709","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/24709","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/24710","fieldValue":"OKeefe, Robert M."}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/24710","fieldValue":"Davies, Huw T O"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/24710","fieldValue":" Most conventional discrete-event simulation software assumes a simple progression of entities through queues and activities. Such software cannot cope easily with modeling systems where entities can be present in more than one queue, can be involved in more than one activity (i.e., scheduled for more than one event), or can be interrupted while queuing or taking part in an activity in order to join another queue or take part in a different activity. Low-level data structures to address these problems have been implemented in Pascal by extending an existing suite of Pascal procedures, call Pascal_SIM. The problems and their solutions are discussed in the context of machine breakdown in a production system. Comparisons between the use of the new structures and the existing ones showed some gain in computational efficiency and considerable improvement in ease of modeling. The generality of the data structure is considered."}{"fieldName":"dc.title","informationCode":"WARN_TEXT_LENGTH_LARGE","handle":"12345678_acm\/24710","fieldValue":"Simplifying the modeling of multiple activities, multiple queuing, and interruptions: a new low-level data structure"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/24710","fieldValue":"ACM"}