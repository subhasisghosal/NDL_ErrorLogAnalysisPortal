{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/18637","fieldValue":"Poppe, G. P M"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/18637","fieldValue":"Wijers, C. M J"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18637","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18637","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18638","fieldValue":" We discuss mesh-moving, static mesh-regeneration, and local mesh-refinement algorithms that can be used with a finite difference or finite element scheme to solve initial-boundary value problems for vector systems of time-dependent partial differential equations in two space dimensions and time. A coarse base mesh of quadrilateral cells is moved by an algebraic mesh-movement function so as to follow and isolate spatially distinct phenomena. The local mesh-refinement method recursively divides the time step and spatial cells of the moving base mesh in regions where error indicators are high until a prescribed tolerance is satisfied. The static mesh-regeneration procedure is used to create a new base mesh when the existing one becomes too distorted. The adaptive methods have been combined with a MacCormack finite difference scheme for hyperbolic systems and an error indicator based upon estimates of the local discretization error obtained by Richardson extrapolation. Results are presented for several computational examples."}{"fieldName":"dc.title","informationCode":"WARN_TEXT_LENGTH_LARGE","handle":"12345678_acm\/18638","fieldValue":"An adaptive mesh-moving and local refinement method for time-dependent partial differential equations"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18638","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18638","fieldValue":"ACM"}{"fieldName":"dc.relation.haspart","informationCode":"ERR_FORMAT_HASPART","handle":"12345678_acm\/2752","fieldValue":"[{\"visible\":false,\"sortKey\":\"December 2004\",\"expandable\":true,\"handle\":\"12345678_acm\/2774\",\"title\":\"Issue 4, December 2004\"},{\"visible\":false,\"sortKey\":\"September 2004\",\"expandable\":true,\"handle\":\"12345678_acm\/2773\",\"title\":\"Issue 3, September 2004\"},{\"visible\":false,\"sortKey\":\"June 2004\",\"expandable\":true,\"handle\":\"12345678_acm\/2772\",\"title\":\"Issue 2, June 2004\"},{\"visible\":false,\"sortKey\":\"March 2004\",\"expandable\":true,\"handle\":\"12345678_acm\/2771\",\"title\":\"Issue 1(Special Issue on Temporal Information Processing), March 2004\"}]"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18639","fieldValue":" Users of software for solving partial differential equations are often surprised by its inability to formulate their problems.Computer scientists speak of partial differential equations (PDEs) as canonical coupled systems, typically in divergence form. Physicists, chemists, and engineers start with the same description, but then add real-world things like â\u20ACœRankine-Hugoniotâ\u20AC? conditions, integro-differential operators, and Eulerian (moving) coordinate systems.This paper describes a generalization of the classical PDE formulation that allows users to formulate virtually any pde problem. The extended formulation has been used successfully on a wide range of nontrivial problems in the physical sciences that cannot even be written down in the classical form."}