{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/19439","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/19439","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/19440","fieldValue":" Skew-Hamiltonian\/Hamiltonian matrix pencils Î» S &mins; H appear in many applications, including linear-quadratic optimal control problems, H&infty;-optimization, certain multibody systems, and many other areas in applied mathematics, physics, and chemistry. In these applications it is necessary to compute certain eigenvalues and\/or corresponding deflating subspaces of these matrix pencils. Recently developed methods exploit and preserve the skew-Hamiltonian\/Hamiltonian structure and hence increase the reliability, accuracy, and performance of the computations. In this article, we describe the corresponding algorithms which have been implemented in the style of subroutines of the Subroutine Library in Control Theory (SLICOT). Furthermore, we address some of their applications. We describe variants for real and complex problems, as well as implementation details and perform numerical tests using real-world examples to demonstrate the superiority of the new algorithms compared to standard methods."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/19440","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/19440","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/19441","fieldValue":" BACOL and BACOLR are (Fortran 77) B-spline adaptive collocation packages for the numerical solution of 1D parabolic Partial Differential Equations (PDEs). The packages have been shown to be superior to other similar packages, especially for problems exhibiting sharp, moving spatial layer regions, where a stringent tolerance is imposed. In addition to providing temporal error control through the timestepping software, BACOL and BACOLR feature control of a high-order estimate of the spatial error of the approximate solution, obtained by computing a second approximate solution of one higher order of accuracy; the cost is substantialâ\u20AC\u201Dexecution time and memory usage are almost doubled. In this article, we discuss BACOLI, a new version of BACOL that computes only one approximate solution and uses efficient interpolation-based schemes to obtain a spatial error estimate. In previous studies these schemes have been shown to provide spatial error estimates of comparable quality to those of BACOL. We describe the substantial modification of BACOL needed to obtain BACOLI, and provide numerical results showing that BACOLI is significantly more efficient than BACOL, in some cases by as much as a factor of 2. We also introduce a Fortran 95 wrapper for BACOLI (called BACOLI95) and discuss its simplified user interface."}{"fieldName":"dc.title","informationCode":"WARN_TEXT_LENGTH_LARGE","handle":"12345678_acm\/19441","fieldValue":"Algorithm 962: BACOLI: B-spline Adaptive Collocation Software for PDEs with Interpolation-Based Spatial Error Control"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/19441","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/19441","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/19442","fieldValue":" This remark describes efficiency improvements to Algorithm 916 &lsqb;Zaghloul and Ali 2011&rsqb;. It is shown that the execution time required by the algorithm, when run at its highest accuracy, may be improved by more than a factor of 2. A better accuracy vs efficiency tradeoff scheme is also implemented; this requires the user to supply the number of significant figures desired in the computed values as an extra input argument to the function. Using this tradeoff, it is shown that the efficiency of the algorithm may be further improved significantly while maintaining reasonably accurate and safe results that are free of the pitfalls and complete loss of accuracy seen in other competitive techniques. The current version of the code is provided in Matlab and Scilab in addition to a Fortran translation prepared to meet the needs of real-world problems where very large numbers of function evaluations would require the use of a compiled language. To fulfill this last requirement, a recently proposed reformed version of HumlÃ­Ä?ek's w4 routine, shown to maintain the claimed accuracy of the algorithm over a wide and fine grid, is implemented in the present Fortran translation for the case of four significant figures. This latter modification assures the reliability of the code in the solution of practical problems requiring numerous evaluation of the function for applications requiring low-accuracy computations $("}