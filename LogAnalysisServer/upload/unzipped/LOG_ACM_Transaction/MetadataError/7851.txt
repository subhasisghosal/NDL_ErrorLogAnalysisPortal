{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/10515","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/1131","fieldValue":" Many classes of distributed applications, including e-business, e-government, and ambient intelligence, consist of networking infrastructures, where the nodes (peers)â\u20AC\u201Dbe they software components, human actors or organizational unitsâ\u20AC\u201Dcooperate with each other to achieve shared goals. The multi-agent system metaphor fits very well such settings because it is founded on intentional and social concepts and mechanisms. Not surprisingly, many agent-oriented software development methods have been proposed, including GAIA, PASSI, and Tropos. This paper extends the Tropos methodology, enhancing its ability to support high variability design through the explicit modelling of alternatives, it adopts an extended notion of agent capability and proposes a refined Tropos design process. The paper also presents an implemented software development environment for Tropos, founded on the Model-Driven Architecture (MDA) framework and standards. The extended Tropos development process is illustrated through a case study involving an e-commerce application."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1131","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1131","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/1958","fieldValue":" The exponential growth of sequential processors has come to an end, and thus, parallel processing is probably the only way to achieve performance growth. We propose the development of parallel architectures based on data-driven scheduling. Data-driven scheduling enforces only a partial ordering as dictated by the true data dependencies, which is the minimum synchronization possible. This is very beneficial for parallel processing because it enables it to exploit the maximum possible parallelism. We provide architectural support for data-driven execution for the Data-Driven Multithreading (DDM) model. In the past, DDM has been evaluated mostly in the form of virtual machines. The main contribution of this work is the development of a highly efficient hardware support for data-driven execution and its integration into a multicore system with eight cores on a Virtex-6 FPGA. The DDM semantics make barriers and cache coherence unnecessary, which reduces the synchronization latencies significantly and makes the cache simpler. The performance evaluation has shown that the support for data-driven execution is very efficient with negligible overheads. Our prototype can support very small problem sizes (matrix 16Ã\u201416) and ultra-lightweight threads (block of 4x4) that achieve speedups close to linear. Such results cannot be achieved by software-based systems."}{"fieldName":"dc.subject","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1958","fieldValue":"FPGA"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1958","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1958","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/10516","fieldValue":"Garcia-Saavedra, Andres"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/10516","fieldValue":" Distributed opportunistic scheduling (DOS) is inherently more difficult than conventional opportunistic scheduling due to the absence of a central entity that knows the channel state of all stations. With DOS, stations use random access to contend for the channel and, upon winning a contention, they measure the channel conditions. After measuring the channel conditions, a station only transmits if the channel quality is good; otherwise, it gives up the transmission opportunity. The distributed nature of DOS makes it vulnerable to selfish users: By deviating from the protocol and using more transmission opportunities, a selfish user can gain a greater share of wireless resources at the expense of \"well-behaved\" users. In this paper, we address the problem of selfishness in DOS from a game-theoretic standpoint. We propose an algorithm that satisfies the following properties: 1) When all stations implement the algorithm, the wireless network is driven to the optimal point of operation; and 2) one or more selfish stations cannot obtain any gain by deviating from the algorithm. The key idea of the algorithm is to react to a selfish station by using a more aggressive configuration that (indirectly) punishes this station. We build on multivariable control theory to design a mechanism for punishment that is sufficiently severe to prevent selfish behavior, yet not so severe as to render the system unstable. We conduct a game-theoretic analysis based on repeated games to show the algorithm's effectiveness against selfish stations. These results are confirmed by extensive simulations."}