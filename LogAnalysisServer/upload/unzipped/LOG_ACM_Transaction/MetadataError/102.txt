{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11243","fieldValue":" Object-Oriented Analysis and Design (OOAD) courses enable students to establish a requirements model of an application, successively transform those requirements into logical design models, and then transform the logical models into physical design models. However, students attending OOAD courses typically encounter difficulties in the transition. Model-Driven Architecture (MDA) provides a model transformation framework for transitioning between OOAD phases. Considering the advantages of MDA in phase transitions, this study proposes that integrating conventional OOAD instruction with the MDA framework and describing transition relations in diagrammatic representations might improve studentsâ\u20AC™ understanding of the transitions. This study used an empirical design that involved using two treatments (MDA-based and conventional instruction) to examine the relevance of MDA-based instruction in the effective understanding of the transitions on the basis of cognitive load theory, the split-attention principle, and theories of representation format. The results indicate that, compared with conventional instruction, MDA-based instruction is more efficient because it improves mental efficiency by reducing extraneous cognitive load. This study can assist educators in understanding the difficulties in learning phase transitions and motivate researchers to develop more effective learning instructions for transitioning between OOAD phases."}{"fieldName":"dc.title","informationCode":"WARN_TEXT_LENGTH_LARGE","handle":"12345678_acm\/11243","fieldValue":"Evaluation of Model Driven Architecture-Based Instruction for Understanding Phase Transitions in Object-Oriented Analysis and Design"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11243","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11243","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/11244","fieldValue":"Laakso, Mikko-Jussi"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11244","fieldValue":" Educational technology offers several potential benefits for programming education. Still, to facilitate the technology properly, integration into a course must be carefully designed. In this article, we present a redesign of an object-oriented university-level programming course. In the redesign, a collaborative education tool was utilized to enhance active learning, facilitate communication between students and teachers, and remodel the evaluation procedure by utilizing automatically assessed tasks. The redesign was based on the best practices found in our own earlier research and that of the research community, with a focus on facilitating active learning methods and student collaboration. The redesign was evaluated by comparing two instances of the redesigned course against two instances using the old methodology. The drop-out rate decreased statistically significantly in the redesigned course instances. Moreover, there was a trend toward higher grade averages in the redesigned instances. Based on the results, we can conclude that the utilization of educational technology has a highly positive effect on student performance. Still, making major changes to course methodology does not come without certain difficulties. Hence, we also present our experiences and suggestions for the course redesign to help other educators and researchers perform similar design changes."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11244","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11244","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11245","fieldValue":" This article reports on an action research project on improving a functional programming course by moving toward a practical and flexible study environmentâ\u20AC\u201Dflipped and blended classroom. Teaching the topic of functional programming was found to be troublesome using a traditional lectured course format. The need to increase studentsâ\u20AC™ amount of practice emerged while subsequent challenges relating to studentsâ\u20AC™ independent practical coursework were observed. Particular concerns relating to group work, learning materials, and the attribute of flexibility were investigated during the third action research cycle. The research cycle was analyzed using a qualitative survey on studentsâ\u20AC™ views, teacher narrative, and studentsâ\u20AC™ study activity data. By this third research cycle, we found that (i) the â\u20ACœcall for explanationâ\u20AC? is an apt conceptualization for supporting independent work, and in particular for the design of learning materials; (ii) use of student-selected groups that can be flexibly resized or even disbanded enables spontaneous peer support and can avoid frustration about group work; and (iii) students greatly appreciate the high degree of flexibility in the course arrangements but find that it causes them to slip from their goals. The project has improved our understanding of a successful implementation of the target course based on group work and learning materials in the context of independent study, while the attribute of flexibility revealed a contradiction that indicates the need for further action."}{"fieldName":"dc.description","informationCode":"ERR_FOUND_HTML_TAG","handle":"12345678_acm\/11245","fieldValue":"Author Affiliation: University of Jyv&#228;skyl&#228;, Finland (Isomttnen, Ville; Tirronen, Ville)"}