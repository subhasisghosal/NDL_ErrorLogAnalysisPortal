{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/12555","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/12556","fieldValue":" To reduce a graph problem to its planar version, a standard technique is to replace crossings in a drawing of the input graph by planarizing gadgets. We show unconditionally that such a reduction is not possible for the perfect matching problem and also extend this to some other problems related to perfect matching. We further show that there is no planarizing gadget for the Hamiltonian cycle problem."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/12556","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/12556","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/12557","fieldValue":" We study a basic problem of approximating the size of an unknown set S in a known universe U. We consider two versions of the problem. In both versions, the algorithm can specify subsets TâŠ\u2020U. In the first version, which we refer to as the group query or subset query version, the algorithm is told whether Tâˆ©S is nonempty. In the second version, which we refer to as the subset sampling version, if Tâˆ©S is nonempty, then the algorithm receives a uniformly selected element from Tâˆ©S. We study the difference between these two versions in both the case that the algorithm is adaptive and the case in which it is nonadaptive. Our main focus is on a natural family of allowed subsets, which correspond to intervals, as well as variants of this family."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/12557","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/12557","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/12558","fieldValue":"Jang, Jing-Tang"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/12558","fieldValue":" SubsetSum is a well-known NP-complete problem: given t âˆˆ $Z^+ and a set S of m positive integers, output YES if and only if there is a subset Sâ\u20AC²â\u20AC\u2030âŠ\u2020â\u20AC\u2030S such that the sum of all numbers in Sâ\u20AC² equals t. The problem and its search and optimization versions are known to be solvable in pseudopolynomial time in general. We develop a one-pass deterministic streaming algorithm that uses space O(&frac; log tÎµ) and decides if some subset of the input stream adds up to a value in the range {(1 Â± &epsi;)t}. Using this algorithm, we design space-efficient fully polynomial-time approximation schemes (FPTAS) solving the search and optimization versions of SubsetSum. Our algorithms run in O(&frac;1 Îµ m2) time and O(&frac;1Îµ) space on unit-cost RAMs, where 1 + &epsi; is the approximation factor. This implies constant space quadratic time FPTAS on unit-cost RAMs when &epsi; is a constant. Previous FPTAS used space linear in m. In addition, we show that on certain inputs, when a solution is located within a short prefix of the input sequence, our algorithms may run in sublinear time. We apply our techniques to the problem of finding balanced separators, and we extend our results to some other variants of the more general knapsack problem. When the input numbers are encoded in unary, the decision version has been known to be in log space. We give streaming space lower and upper bounds for unary SubsetSum (USS). If the input length is N when the numbers are encoded in unary, we show that randomized s-pass streaming algorithms for exact SubsetSum need space &Omega (&frac;&frac;&sqrt;Ns) and give a simple deterministic two-pass streaming algorithm using &O(&sqrt;&sqrt;N log N) space. Finally, we formulate an encoding under which USS is monotone and show that the exact and approximate versions in this formulation have monotone O(logâ\u20AC\u20302$t) depth Boolean circuits. We also show that any circuit using &epsiv;-approximator gates for SubsetSum under this encoding needs Î©(n\/logâ\u20AC\u2030n) gates to compute the disjointness function."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/12558","fieldValue":"ACM"}