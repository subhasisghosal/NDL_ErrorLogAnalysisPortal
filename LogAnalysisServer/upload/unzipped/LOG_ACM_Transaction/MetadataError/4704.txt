{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/25144","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/25144","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/25145","fieldValue":" The state and structure of a model may vary during a simulation and, thus, also its computational demands. Adapting simulation algorithms to these demands at runtime can therefore improve their performance. While this is a general and cross-cutting concern, only few simulation systems offer reusable support for this kind of runtime adaptation. We present a flexible and generic mechanism for the runtime adaptation of component-based simulation algorithms. It encapsulates simulation algorithms applicable to a given problem and employs reinforcement learning to explore the algorithmsâ\u20AC™ performance during a simulation run. We evaluate our approach on a modeling formalism from computational biology and on a benchmark model defined in PDEVS, thereby investigating a broad range of options for improving its learning capabilities."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/25145","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/25145","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/25146","fieldValue":" The emerging software-defined networking (SDN) technology decouples the control plane from the data plane in a computer network with open and standardized interfaces, and hence opens up the network designersâ\u20AC™ options and ability to innovate. The wide adoption of SDN in industry has motivated the development of large-scale, high-fidelity testbeds for evaluation of systems that incorporate SDN. In this article, we develop a framework to support OpenFlow-based SDN simulation and distributed emulation, by leveraging our prior work on a hybrid network testbed with a parallel network simulator and a virtual-machine-based emulation system. We show how to exploit typical SDN controller behaviors to handle performance issues caused by the centralized controller in parallel discrete-event simulation. In particular, we develop an asynchronous synchronization algorithm for passive SDN controllers and design a two-level architecture for active SDN controllers. We evaluate the system performance, showing good scalability. Finally, we present a case study, using the testbed, to evaluate network verification applications in an SDN-based data center network."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/25146","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/25146","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/25147","fieldValue":" In modular, hierarchical modeling, couplings (connections) describe and constrain the communication, and thus interaction, between model components. Defining couplings between a large set of components in an extensional mannerâ\u20AC\u201Dlisting all existing couplings individuallyâ\u20AC\u201Doften proves to be rather tedious. Moreover, if models change their structure, that is, composition and interaction patterns and, in some cases, even their interfaces during simulation, questions about the consistency of the couplings arise. For instance, an extensionally defined coupling may refer to a model that no longer exists. Instead, an intensional coupling definition, based on attributes of the components to couple and dynamically translated into concrete couplings during simulation, promises to alleviate these problems. We propose a concept that combines a flexible, yet expressive, definition of couplings that rests on component interfaces announcing attributes of interest. However, intensional couplings come at a price, as they need to be translated during simulation; in variable-structure models, this translation has to happen frequently. We illuminate our concept based on a revision of the modeling formalism Multilevel Discrete Event System Specification (ML-DEVS). Developed for multilevel modeling and simulation, ML-DEVS exhibits another alternative to intensional couplings, that is, sharing parts of model states for up- and downward causation. The intricate interplay between these different types of couplings is revealed in the abstract simulator of ML-DEVS."}{"fieldName":"dc.subject","informationCode":"ERR_FOUND_HTML_TAG","handle":"12345678_acm\/25147","fieldValue":"<scp>DEVS<\/scp>"}