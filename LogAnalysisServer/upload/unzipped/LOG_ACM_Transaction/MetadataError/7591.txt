{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9991","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/9991","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/9991","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/9992","fieldValue":" p-Cycles have been proposed for preprovisioned 1 + N protection in optical mesh networks. Although the protection circuits are preconfigured, the detection of failures and the rerouting of traffic can be a time consuming operation. Another survivable mode of operation is the 1 + 1 protection mode, in which a signal is transmitted to the destination on two link disjoint circuits, hence recovery from failures is expeditious. However, this requires a large number of protection circuits. In this paper, we introduce a new concept in protection: 1 + N protection, in which a p-Cycle, similar to FIPP p-cycles, can be used to protect a number of bidirectional connections, which are mutually link disjoint, and also link disjoint from all links of the p-Cycle. However, data units from different circuits are combined using network coding, which can be implemented in a number of technologies, such as Next Generation SONET (NGS), MPLS\/GMPLS, or IP-over-WDM. The maximum outage time under this protection scheme can be limited to no more than the p-Cycle propagation delay. It is also shown how to implement a hybrid 1 + N and 1 + N protection scheme, in which on-cycle links are protected using 1 + N protection, while straddling links, or paths, are protected using 1 + N protection. Extensions of this technique to protect multipoint connections are also introduced. A performance study based on optimal formulations of the 1 + 1, 1 + N and the hybrid scheme is introduced. Although 1 + N speed of recovery is comparable to that of 1 + N protection, numerical results for small networks indicate that 1 + N is about 30% more efficient than 1 + 1 protection, in terms of the amount of protection resources, especially as the network graph density increases."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9992","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/9992","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/9992","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/9993","fieldValue":"Tzeng, Nian-Feng"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/9993","fieldValue":" A novel storage design for IP routing table construction is introduced on the basis of a single set-associative hash table to support fast longest prefix matching (LPM). The proposed design involves two key techniques to lower table storage required drastically: 1) storing transformed prefix representations; and 2) accommodating multiple prefixes per table entry via prefix aggregation, achieving superior storage-efficiency (SUSE). With each prefix (p(x)) maneuvered as a polynomial, p(x) = q(x) Ã\u2014 g(x) + r(x) based on a divisor g(x), SUSE keeps only q(x) rather than full and long p(x) in an r(x)-indexed table with $2^degree(g(x))$ entries, because q(x) and r(x) uniquely identify p(x). Additionally, using r(x) as the hash index exhibits better distribution than do original prefixes, reducing hash collisions, which can be tolerated further by the set-associative design. Given a set of chosen prefix lengths (called \"treads\"), all prefixes are rounded down to nearest treads under SUSE before hashed to the table using their transformed representations so that prefix aggregation opportunities abound in hash entries. SUSE yields significant table storage reduction and enjoys fast lookups and speedy incremental updates not possible for a typical trie-based design, with the worst-case lookup time shown upper-bounded theoretically by the number of treads Î¶ but found experimentally to be 4 memory accesses when Î¶ equals 8. SUSE makes it possible to fit a large routing table with 256 K (or even 1 M) prefixes in on-chip SRAM by today's ASIC technology. It solves both the memory- and the bandwidth-intensive problems faced by IP routing."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9993","fieldValue":"{\"eissn\":\"\"}"}