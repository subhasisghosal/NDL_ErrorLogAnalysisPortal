{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/1140","fieldValue":"Magdon-Ismail, Malik"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/1140","fieldValue":" We present a modeling laboratory, Virtual Laboratory for the Simulation and Analysis of Social Group Evolution (ViSAGE), that views the organization of human communities and the experience of individuals in a community as contingent upon on the dynamic properties, or micro-laws, of social groups. The laboratory facilitates the theorization and validation of these properties through an iterative research processes that involves (1) forward simulation experiments, which are used to formalize dynamic group properties, (2) reverse engineering from real data on how the parameters are distributed among individual actors in the community, and (3) grounded research, such as participant observation, that follows specific activities of real actors in a community and determines if, or how well, the micro-laws describe the way choices are made in real world, local settings. In this article we report on the design of ViSAGE. We first give some background to the model. Next we detail each component. We then describe a set of simulation experiments that we used to further design and clarify ViSAGE as a tool for studying emergent properties\/phenomena in social networks."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1140","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1140","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/2072","fieldValue":"Martins, Luiz G A"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/2072","fieldValue":"Cardoso, Joo M P"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/2072","fieldValue":"Delbem, Alexandre C B"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2072","fieldValue":" A large number of compiler optimizations are nowadays available to users. These optimizations interact with each other and with the input code in several and complex ways. The sequence of application of optimization passes can have a significant impact on the performance achieved. The effect of the optimizations is both platform and application dependent. The exhaustive exploration of all viable sequences of compiler optimizations for a given code fragment is not feasible. As this exploration is a complex and time-consuming task, several researchers have focused on Design Space Exploration (DSE) strategies both to select optimization sequences to improve the performance of each function of the application and to reduce the exploration time. In this article, we present a DSE scheme based on a clustering approach for grouping functions with similarities and exploration of a reduced search space resulting from the combination of optimizations previously suggested for the functions in each group. The identification of similarities between functions uses a data mining method that is applied to a symbolic code representation. The data mining process combines three algorithms to generate clusters: the Normalized Compression Distance, the Neighbor Joining, and a new ambiguity-based clustering algorithm. Our experiments for evaluating the effectiveness of the proposed approach address the exploration of optimization sequences in the context of the ReflectC compiler, considering 49 compilation passes while targeting a Xilinx MicroBlaze processor, and aiming at performance improvements for 51 functions and four applications. Experimental results reveal that the use of our clustering-based DSE approach achieves a significant reduction in the total exploration time of the search space (20Ã\u2014 over a Genetic Algorithm approach) at the same time that considerable performance speedups (41&percnt; over the baseline) were obtained using the optimized codes. Additional experiments were performed considering the LLVM compiler, considering 124 compilation passes, and targeting a LEON3 processor. The results show that our approach achieved geometric mean speedups of 1.49 Ã\u2014 , 1.32 Ã\u2014 , and 1.24 Ã\u2014 for the best 10, 20, and 30 functions, respectively, and a global improvement of 7&percnt; over the performance obtained when compiling with -O2."}{"fieldName":"dc.description","informationCode":"ERR_FOUND_HTML_TAG","handle":"12345678_acm\/2072","fieldValue":"Author Affiliation: University of Porto, Porto, Portugal (Nobre, Ricardo; Cardoso, Joo M P); University of S&#227;o Paulo, SP, Brazil (Delbem, Alexandre C B; Marques, Eduardo); Federal University of Uberl&#226;ndia, MG, Brazil (Martins, Luiz G A)"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2072","fieldValue":"ACM"}