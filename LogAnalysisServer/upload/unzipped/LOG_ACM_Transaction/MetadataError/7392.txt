{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/1866","fieldValue":"Wang, Sheng-De"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/1866","fieldValue":" A string-matching engine capable of inspecting multiple characters in parallel can multiply the throughput. However, the space required for implementing a matching engine that can process multiple characters in parallel generally grows exponentially with respect to the characters to be processed in parallel. Based on the Aho-Corasick algorithm (AC-algorithm), this work presents a novel multicharacter transition Nondeterministic Finite Automaton (NFA) approach, called multicharacter AC-NFA, to allow for the inspection of multiple characters in parallel. This approach first converts an AC-trie to an AC-NFA by allowing for the simultaneous activation of multiple states and then converts the AC-NFA to a k-character AC-NFA by an algorithm with concatenation operations and assistant transitions. Additionally, the alignment problem, which occurs while multiple characters are being inspected in parallel, is solved using assistant transitions. Moreover, a corresponding output is provided for each inspected character by introducing priority multiplexers to determine the final matching outputs during implementation of the multicharacter AC-NFA. Consequently, the number of derived k-character transitions grows linearly with respect to the number k. Furthermore, the derived multicharacter AC-NFA is implemented on FPGAs for evaluation. The resulting throughput grows approximately 14 times and the hardware cost grows about 18 times for 16-character AC-NFA implementation, as compared with that for 1-character AC-NFA implementation. The achievable throughput is 21.4Gbps for the 16-character AC-NFA implementation operating at a 167.36MHz clock."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1866","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1866","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/9595","fieldValue":" In multi-hop ad hoc networks, stations may pump more traffic into the networks than can be supported, resulting in high packet-loss rate, re-routing instability and unfairness problems. This paper shows that controlling the offered load at the sources can eliminate these problems. To verify the simulation results, we set up a real 6-node multi-hop network. The experimental measurements confirm the existence of the optimal offered load. In addition, we provide an analysis to estimate the optimal offered load that maximizes the throughput of a multi-hop traffic flow. We believe this is a first paper in the literature to provide a quantitative analysis (as opposed to simulation) for the impact of hidden nodes and signal capture on sustainable throughput. The analysis is based on the observation that a large-scale 802.11 network with hidden nodes is a network in which the carrier-sensing capability breaks down partially. Its performance is therefore somewhere between that of a carrier-sensing network and that of an Aloha network. Indeed, our analytical closed-form solution has the appearance of the throughput equation of the Aloha network. Our approach allows one to identify whether the performance of an 802.11 network is hidden-node limited or spatial-reuse limited."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9595","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/9595","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/9595","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/9596","fieldValue":" The 802.11e working group has recently proposed the hybrid coordination function (HCF) to provide service differentiation for supporting real-time transmissions over 802.11 WLANs. The HCF is made of a contention-based channel access, known as enhanced distributed coordination access, and of a HCF controlled channel access (HCCA), which requires a Hybrid Coordinator for bandwidth allocation to nodes hosting applications with QoS requirements. The 802.11e proposal includes a simple scheduler providing a Constant Bit Rate service, which is not well suited for bursty media flows. This paper proposes two feedback-based bandwidth allocation algorithms to be used within the HCCA, which have been referred to as feedback based dynamic scheduler (FBDS) and proportional-integral (PI)-FBDS. These algorithms have been designed with the objective of providing services with bounded delays. Given that the 802.11e standard allows queue lengths to be fed back, a control theoretic approach has been employed to design the FBDS, which exploits a simple proportional controller, and the PI-FBDS, which implements a proportional-integral controller. Proposed algorithms can be easily implemented since their computational complexities scale linearly with the number of traffic streams. Moreover, a call admission control scheme has been proposed as an extension of the one described in the 802.11e draft. Performance of the proposed algorithms have been theoretically analyzed and computer simulations, using the ns-2 simulator, have been carried out to compare their behaviors in realistic scenarios where video, voice, and FTP flows, coexist at various network loads. Simulation results have shown that, unlike the simple scheduler of the 802.11e draft, both FBDS and PI-FBDS are able to provide services with real-time constraints. However, while the FBDS admits a smaller quota of traffic streams than the simple scheduler, PI-FBDS allows the same quota of traffic that would be admitted using the simple scheduler, but still providing delay bound guarantees."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9596","fieldValue":"{\"eissn\":\"\"}"}