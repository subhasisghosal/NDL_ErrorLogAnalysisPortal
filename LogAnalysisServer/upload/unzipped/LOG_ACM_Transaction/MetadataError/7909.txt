{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/10631","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/10631","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/10632","fieldValue":"Mohsenian-Rad, Hamed"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/10632","fieldValue":"Wong, Vincent W S"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/10632","fieldValue":" Recent results have shown that selfish users do not have an incentive to participate in intersession network coding in a static noncooperative game setting. Because of this, the worst-case network efficiency (i.e., the price-of-anarchy) can be as low as 20%. In this paper, we show that if the same game is played repeatedly, then the price-of-anarchy can be improved to 36%. We design a grim-trigger strategy that encourages users to cooperate and participate in the intersession network coding. A key challenge is to determine a common cooperative coding rate that the users should mutually agree on. We resolve the conflict of interest among the users through a bargaining process and obtain tight upper bounds for the price-of-anarchy that are valid for any possible bargaining scheme. Moreover, we propose a simple and efficient min-max bargaining solution that can achieve these upper bounds, as confirmed through simulation studies. The coexistence of multiple selfish network coding sessions as well as the coexistence of selfish network coding and routing sessions are also investigated. Our results represent a first step toward designing practical intersession network coding schemes that achieve reasonable performance for selfish users."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/10632","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/10632","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/10632","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/10633","fieldValue":" Modern stock trading and cluster applications require microsecond latencies and almost no losses in data centers. This paper introduces an algorithm called FineComb that can obtain fine-grain end-to-end loss and latency measurements between edge routers in these networks. Such a mechanism can allow managers to distinguish between latencies and loss singularities caused by servers and those caused by the network. Compared to prior work, such as Lossy Difference Aggregator (LDA), which focused on switch-level latency measurements, the requirement of end-to-end latency measurements introduces the challenge of reordering that occurs commonly in IP networks due to churn. The problem is even more acute in switches across data center networks that employ multipath routing algorithms to exploit the inherent path diversity. Without proper care, a loss estimation algorithm can confound loss and reordering; furthermore, any attempt to aggregate delay estimates in the presence of reordering results in severe errors. FineComb deals with these problems using order-agnostic packet digests and a simple new idea we call stash recovery. Our evaluation demonstrates that FineComb is orders of magnitude more accurate than LDA in loss and delay estimates in the presence of reordering."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/10633","fieldValue":"{\"eissn\":\"\"}"}