{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/24912","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/24913","fieldValue":" Distributed simulation cloning technology is designed to analyze alternative scenarios of a distributed simulation concurrently within the same execution session. One important goal is to optimize execution by avoiding repeated computation among independent scenarios. Our research is concerned with the cloning of High Level Architecture (HLA)-based distributed simulations; a federate may spawn clones to explore different scenarios at a decision point. This article introduces the cloning mechanism and the supporting infrastructure. When enabling cloning, our approach ensures the state consistency and supports user transparency and reusability of federate codes. When a federate clones, it is desirable to replicate only those federates whose states will be affected while the rest are shared among the old and new scenarios. This article discusses the theory and issues involved in such an incremental cloning mechanism, which guarantees accurate sharing and initiates cloning only when absolutely necessary. Experiments have been carried out to compare the performance of entire cloning and incremental cloning mechanisms. Experimental results indicate that the proposed approach provides correct cloning and can significantly reduce the execution time for evaluating different scenarios of a distributed simulation. Moreover the incremental cloning mechanism significantly surpasses entire cloning in terms of execution efficiency."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/24913","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/24913","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/24914","fieldValue":"LEcuyer, Pierre"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/24914","fieldValue":" G. Marsaglia recently introduced a class of very fast xorshift random number generators, whose implementation uses three â\u20ACœxorshiftâ\u20AC? operations. They belong to a large family of generators based on linear recurrences modulo 2, which also includes shift-register generators, the Mersenne twister, and several others. In this article, we analyze the theoretical properties of xorshift generators, search for the best ones with respect to the equidistribution criterion, and test them empirically. We find that the vast majority of xorshift generators with only three xorshift operations, including those having good equidistribution, fail several simple statistical tests. We also discuss generators with more than three xorshifts."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/24914","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/24914","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/24915","fieldValue":" We present a concise representation of fractional factorials and an algorithm to quickly generate resolution V designs. The description is based on properties of a complete, orthogonal discrete-valued basis set called Walsh functions. We tabulate two-level resolution V fractional factorial designs, as well as central composite designs allowing estimation of full second-order models, for experiments involving up to 120 factors. The simple algorithm provided can be used to characterize even larger designs, and a fast Walsh transform method quickly generates design matrices from our representation."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/24915","fieldValue":"ACM"}