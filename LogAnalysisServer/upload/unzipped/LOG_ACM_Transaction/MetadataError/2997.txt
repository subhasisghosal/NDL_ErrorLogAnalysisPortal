{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/19981","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/19981","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/19982","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/19982","fieldValue":"ACM"}{"fieldName":"dc.relation.haspart","informationCode":"ERR_SPACE_MULTIPLE","handle":"12345678_acm\/19621","fieldValue":"[{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19983\",\"title\":\"Towards monolingual programming environments\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19984\",\"title\":\"A modular verifiable exception handling mechanism\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19985\",\"title\":\"Implementation of resilient, atomic data types\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19986\",\"title\":\"CIRCAL and the representation of communication, concurrency, and time\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19987\",\"title\":\"Detecting global variables in denotational specifications\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19988\",\"title\":\"Efficient demand-driven evaluation.  Part 1\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19989\",\"title\":\"Dealing with world-model-based programs\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19990\",\"title\":\"Optimal parallel generation of a computation tree form\"}]"}{"fieldName":"dc.relation.haspart","informationCode":"WARN_JSON_MINIFY","handle":"12345678_acm\/19621","fieldValue":"[{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19983\",\"title\":\"Towards monolingual programming environments\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19984\",\"title\":\"A modular verifiable exception handling mechanism\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19985\",\"title\":\"Implementation of resilient, atomic data types\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19986\",\"title\":\"CIRCAL and the representation of communication, concurrency, and time\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19987\",\"title\":\"Detecting global variables in denotational specifications\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19988\",\"title\":\"Efficient demand-driven evaluation.  Part 1\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19989\",\"title\":\"Dealing with world-model-based programs\"},{\"visible\":true,\"expandable\":false,\"handle\":\"12345678_acm\/19990\",\"title\":\"Optimal parallel generation of a computation tree form\"}]"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/19983","fieldValue":" Most programming environments are much too complex. One way of simplifying them is to reduce the number of mode-dependent languages the user has to be familiar with. As a first step towards this end, the feasibility of unified command\/programming\/debugging languages, and the concepts on which such languages have to be based, are investigated. The unification process is accomplished in two phases. First, a unified command\/programming framework is defined and, second, this framework is extended by adding an integrated debugging capability to it. Strict rules are laid down by which to judge language concepts presenting themselves as candidates for inclusion in the framework during each phase. On the basis of these rules many of the language design questions that have hitherto been resolved this way or that, depending on the taste of the designer, lose their vagueness and can be decided in an unambiguous manner."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/19983","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/19983","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2913","fieldValue":" Temporal information is an important attribute of a topic, and a topic usually exists in a limited period. Therefore, many researchers have explored the utilization of temporal information in topic detection and tracking (TDT). They use either a story's publication time or temporal expressions in text to derive temporal relatedness between two stories or a story and a topic. However, past research neglects the fact that people tend to express a time with different granularities as time lapses. Based on a careful investigation of temporal information in news streams, we propose a new strategy with time granularity reasoning for utilizing temporal information in topic tracking. A set of topic times, which as a whole represent the temporal attribute of a topic, are distinguished from others in the given on-topic stories. The temporal relatedness between a story and a topic is then determined by the highest coreference level between each time in the story and each topic time where the coreference level between a test time and a topic time is inferred from the two times themselves, their granularities, and the time distance between the topic time and the publication time of the story where the test time appears. Furthermore, the similarity value between an incoming story and a topic, that is the likelihood that a story is on-topic, can be adjusted only when the new story is both temporally and semantically related to the target topic. Experiments on two different TDT corpora show that our proposed method could make good use of temporal information in news stories, and it consistently outperforms the baseline centroid algorithm and other algorithms which consider temporal relatedness."}