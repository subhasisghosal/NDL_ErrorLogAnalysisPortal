{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/12534","fieldValue":" In 1997, HÃ¥stad showed NP-hardness of (1 âˆ\u2019 &epsi;, 1&sol;q &plus; Î\u201D)-approximating $Max-3Lin(Z_q); however, it was not until 2007 that Guruswami and Raghavendra were able to show NP-hardness of (1 âˆ\u2019 &epsi;, Î\u201D)-approximating Max-3Lin(Z). In 2004, Khot--Kindler--Mossel--Oâ\u20AC™Donnell showed UG-hardness of (1 âˆ\u2019 &epsi;, Î\u201D)-approximating Max-2Lin(Zq) for q &equals; q(&epsi;, Î\u201D) a sufficiently large constant; however, achieving the same hardness for Max-2Lin(Z) was given as an open problem in Raghavendraâ\u20AC™s 2009 thesis. In this work, we show that fairly simple modifications to the proofs of the Max-3Lin(Zq) and Max-2Lin(Zq) results yield optimal hardness results over Z. In fact, we show a kind of â\u20ACœbicriteriaâ\u20AC? hardness: Even when there is a (1 âˆ\u2019 &epsi;)-good solution over Z, it is hard for an algorithm to find a Î\u201D-good solution over Z, R, or Zm$ for any m &ges; q(&epsi;, Î\u201D) of the algorithmâ\u20AC™s choosing."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/12534","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/12534","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2199","fieldValue":" We design top trees as a new simpler interface for data structures maintaining information in a fully dynamic forest. We demonstrate how easy and versatile they are to use on a host of different applications. For example, we show how to maintain the diameter, center, and median of each tree in the forest. The forest can be updated by insertion and deletion of edges and by changes to vertex and edge weights. Each update is supported in O(log n) time, where n is the size of the tree(s) involved in the update. Also, we show how to support nearest common ancestor queries and level ancestor queries with respect to arbitrary roots in O(log n) time. Finally, with marked and unmarked vertices, we show how to compute distances to a nearest marked vertex. The latter has applications to approximate nearest marked vertex in general graphs, and thereby to static optimization problems over shortest path metrics.Technically speaking, top trees are easily implemented either with Frederickson's [1997a] topology trees or with Sleator and Tarjan's [1983] dynamic trees. However, we claim that the interface is simpler for many applications, and indeed our new bounds are quadratic improvements over previous bounds where they exist."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2199","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2199","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/12535","fieldValue":" Alice and Bob want to know if two strings of length n are almost equal. That is, do the strings differ on at most a bits? Let 0 &les; a &les; n âˆ\u2019 1. We show (1) any deterministic protocolâ\u20AC\u201Das well as any error-free quantum protocol (C&ast; version)â\u20AC\u201Dfor this problem requires at least n âˆ\u2019 2 bits of communication, and (2) a lower bound of n&sol;2 âˆ\u2019 1 for error-free Q&ast; quantum protocols. We also show the same results for determining if two strings differ in exactly a bits. Our results are obtained by lower-bounding the ranks of the appropriate matrices."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/12535","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/12535","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/12536","fieldValue":" We consider parameterized subgraph counting problems of the following form: given a graph G, how many k-tuples of its vertices induce a subgraph with a given property? A number of such problems are known to be #W[1]-complete; here, we substantially generalize some of these existing results by proving hardness for two large families of such problems. We demonstrate that it is #W[1]-hard to count the number of k-vertex subgraphs having any property where the number of distinct edge densities of labeled subgraphs that satisfy the property is $o(k^2$). In the special case in which the property in question depends only on the number of edges in the subgraph, we give a strengthening of this result, which leads to our second family of hard problems."}