{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/9096","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/9096","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/9097","fieldValue":"Le Boudec, Jean-Yves"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/9097","fieldValue":" The min-plus theory of greedy shapers has been developed after Cruz's results on the calculus of network delays. An example of a greedy shaper is the buffered leaky bucket controller. The theory of greedy shapers establishes a number of properties such as the series decomposition of shapers or the conservation of arrival constraints by reshaping. It applies in all rigor either to fluid systems or to packets of constant size such as ATM. For variable length packets, the distortion introduced by packetization affects the theory, which is no longer valid. In this paper, we elucidate the relationship between shaping and packetization effects. We show a central result, namely, the min-plus representation of a packetized greedy shaper. We find a sufficient condition under which series decomposition of shapers and conservation of arrival constraints still holds in the presence of packetization effects. This allows us to demonstrate the equivalence of implementing a buffered leaky bucket controller based on either virtual finish times or on bucket replenishment. However, we show in some examples that if the condition is not satisfied, then the property may no longer hold. This indicates that, for variable size packets, unlike for fluid systems, there is a fundamental difference between constraints based on leaky buckets and constraints based on general arrival curves, such as spacing constraints. The latter are used in the context of ATM to obtain tight end-to-end delay bounds. In this paper, we use a min-plus theory, and obtain results on greedy shapers for variable length packets which are not readily explained with the max-plus theory of Chang."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9097","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/9097","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/9097","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/9098","fieldValue":" We study the performance of TCP in an internetwork consisting of both rate-controlled and nonrate-controlled segments. A common example of such an environment occurs when the end systems are part of IP datagram networks interconnected by a rate-controlled segment, such as an ATM network using the available bit rate (ABR) service. In the absence of congestive losses in either segment, TCP keeps increasing its window to its maximum size. Mismatch between the TCP window and the bandwidth-delay product of the network will result in accumulation of large queues and possibly buffer overflows in the devices at the edges of the rate-controlled segment, causing degraded throughput and unfairness. We develop an explicit feedback scheme, called Explicit Window Adaptation, based on modifying the receiver's advertised window in TCP acknowledgments returning to the source. The window size indicated to TCP is a function of the free buffer in the edge device. Results from simulations with a wide range of traffic scenarios show that this explicit window adaptation scheme can control the buffer occupancy efficiently at the edge device, and results in significant improvements in packet loss rate, fairness, and throughput over a packet discard policy such as Random Early Detection (RED)."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9098","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.subject","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/9098","fieldValue":"TCP"}