{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2019","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2019","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11164","fieldValue":" Cooperative learning is a well-known instructional technique that has been applied with a wide variety of subject matter and a broad spectrum of populations. This article briefly reviews the principles of cooperative learning, and describes how these principles were incorporated into a comprehensive set of cooperative learning activities for a CS1 course. In each activity, specific roles are assigned to group members in order to highlight important concepts and to enhance the overall functioning of the group. The group processing is followed by a whole-class debriefing led by the instructor, which works in tandem with the group activity to help students improve their understanding of the material. The effectiveness of these cooperative learning activities was assessed in a series of educational research studies which spanned three academic years and included two different instructors. The results of these studies show statistically significant benefits from the cooperative learning approach, both overall and for a broad range of subgroups of students. The article concludes with suggestions for faculty members who may want to use these cooperative learning activities in the classroom, or to develop their own activities along similar lines."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11164","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11164","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11165","fieldValue":" Computing science students amass years of programming experience and a wealth of factual knowledge in their undergraduate courses. Based on our combined years of experience, however, one of our students' abiding shortcomings is that they think there is only one correct answer to issues in most courses: an idealistic stance. Human-centered security, as well as other areas, requires students to understand that they have to weigh up a number of different possible solutions, and satisfice, rather than choose the one that is undeniably the best. In other words, they need to adopt a more realistic stance. Lecture-based teaching cannot develop this facility, due to its inability to engage students deeply with the issues and possible solutions. We argue that depth (in terms of understanding the complexity and issues involved) as well as breadth (in terms of appreciating the different positions taken by users on these issues) are essential for developing the realistic stance. This article reports on an instructional design that was used to help students become more realistic in their decision making. The design is based on seven educational strategies that, in tandem, help students to see the depth and breadth of topics in the course. We detail the instructional design and its application to three topic areas in the course, and report on the outcomes. We found evidence that students did indeed develop the depth and breadth we were hoping for. In concluding, we reflect on the design and the positive result, and propose changes to further improve the course."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11165","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11165","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11166","fieldValue":" Peer Instruction (PI) is an active learning pedagogical technique. PI lectures present students with a series of multiple-choice questions, which they respond to both individually and in groups. PI has been widely successful in the physical sciences and, recently, has been successfully adopted by computer science instructors in lower-division, introductory courses. In this work, we challenge readers to consider PI for their upper-division courses as well. We present a PI curriculum for two upper-division computer science courses: Computer Architecture and Theory of Computation. These courses exemplify several perceived challenges to the adoption of PI in upper-division courses, including: exploration of abstract ideas, development of high-level judgment of engineering design trade-offs, and exercising advanced mathematical sophistication. This work includes selected course materials illustrating how these challenges are overcome, learning gains results comparing these upper-division courses with previous lower-division results in the literature, student attitudinal survey results (N = 501), and pragmatic advice to prospective developers and adopters. We present three main findings. First, we find that these upper-division courses achieved student learning gains equivalent to those reported in successful lower-division computing courses. Second, we find that student feedback for each class was overwhelmingly positive, with 88&percnt; of students recommending PI for use in other computer science classes. Third, we find that instructors adopting the materials introduced here were able to replicate the outcomes of the instructors who developed the materials in terms of student learning gains and student feedback."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11166","fieldValue":"ACM"}