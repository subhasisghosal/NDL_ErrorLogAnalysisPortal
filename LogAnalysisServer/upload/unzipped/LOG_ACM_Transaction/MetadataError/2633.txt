{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18838","fieldValue":" The MDMT factorization of an n√\u2014n symmetric indefinite matrix A can be used to solve a linear system with A as the coefficient matrix. This factorization can be computed efficiently using an algorithm given in 1977 by Bunch and Kaufman. The LAPACK project has been implementing block versions of well-known algorithms for solving dense linear systems and eigenvalue problems. The block version of the MDMT decomposition algorithm in LAPACK requires the user to specify a block size b by supplying an n√\u2014b scratch array. It then makes (n\/b‚à\u20192)2\/2 invocations of a matrix-matrix product subroutine with one matrix no larger than b√\u2014b, n2\/(2b)‚à\u2019b invocations of a matrix-vector product routine with a matrix no larger than b√\u2014b, and between n‚à\u2019n\/b and 2(n‚à\u2019n\/b) invocations of a matrix-vector product routine with matrices with less than b columns. Because the user can query LAPACK about an optimal block size, our concern is focused on users who cannot change the amount of available scratch space or who neglect to use this facility and are unaware of a performance degradation with small block sizes. This article suggests two alternative algorithms. The first is a block algorithm requiring b√\u2014b scratch space and is about 5% slower than LAPACK's current block algorithm with large b. The user does not have to specify the block size. The second algorithm is a rejuvenation of an old implementation of the MDMT decomposition algorithm that requires n matrix-vector products. The performance of the various algorithms on a specific machine is dependent on the manufacturer's implementation of the different basic linear algebra subroutines that they each invoke. Our data indicate that on the Cray Y-MP, Alliant, and Convex the time for the rejuvenated algorithm is either less than or within 10% of that of LAPACK's block algorithm with large b."}{"fieldName":"dc.subject","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18838","fieldValue":"LAPACK"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18838","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18838","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18839","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18839","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18840","fieldValue":" TRIPACK is a Fortran 77 software package that employs an incremental algorithm to construct a constrained Delaunay traingulation of a set of points in the plane (nodes). The triangulation covers the convex hull of the nodes but may include polygonal constraint regions whose triangles are distinguishable from those in the remainder of the triangulation. This effectively allows for a nonconvex or multiply connected triangulation (the complement of the union of constraint regions) while retaining the efficiency of searching and updating a convex triangulation. The package provides a wide range of capabilities including an efficient means of updating the triangulation with nodal additions or deletions. For N nodes, the storage requirement is 13N integer storage locations in addition to the 2N nodal coordinates."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18840","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18840","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18841","fieldValue":" SRFPACK is a Fortran 77 software package that constructs a smooth interpolatory or approximating surface to data values associated with arbitrarily distributed points in the plane. It employs automatically selected tension factors to preserve shape properties of the data and to avoid overshoot and undershoot associated with steep gradients. The domain of the fitting function may be nonconvex or multiply connected, and the surface may be constrained to have discontinuous value or derivative across a user-specified curve representing, for example, a geological fault line. Although triangle based, the method provides a means of avoiding the inaccuracy associated with long thin triangles on the boundary of the convex hull of the data abscissae."}