{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2415","fieldValue":" We give a polynomial-time algorithm to find a shortest contractible cycle (i.e., a closed walk without repeated vertices) in a graph embedded in a surface. This answers a question posed by Hutchinson. In contrast, we show that finding a shortest contractible cycle through a given vertex is NP-hard. We also show that finding a shortest separating cycle in an embedded graph is NP-hard. This answers a question posed by Mohar and Thomassen."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2415","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2415","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/14999","fieldValue":" A proposal for a scalable frame store architecture for a hardware-based window graphics system is described. The architecture is based on a distributed linear array of common elements called microframe stores. Each window and viewport can be independently configured in size and color depth. Unlike the strip-based hardware window systems referenced, this system places no restrictions on the number of transitions that can be accommodated on each scanline. The approach described allows real-time window graphics to be achieved on a variety of full-color, high-resolution, high-refresh-rate, raster-scan displays with pixel rates of up to 400 MHz."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/14999","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/14999","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/15000","fieldValue":" Principles and techniques useful for calibrated color reproduction are defined. These results are derived from a project to take digital images designed on a variety of different color monitors and accurately reproduce them in a journal using digital offset printing. Most of the images printed were reproduced without access to the image as viewed in its original form; the color specification was derived entirely from calorimetric specification. The techniques described here are not specific to offset printing and can be applied equally well to other digital color devices.The reproduction system described is calibrated using CIE tristimulus values. An image is represented as a set of three-dimensional points, and the color output device as a three-dimensional solid surrounding the set of all reproducible colors for that device, called its gamut. The shapes of the monitor and the printer gamuts are very different, so it is necessary to transform the image points to fit into the destination gamut, a process we call gamut mapping. This paper describes the principles that control gamut mapping. Included also are some details on monitor and printer calibration, and a brief description of how digital halftone screens for offset printing are prepared."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/15000","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/15000","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/15001","fieldValue":" Brushing commonly refers to the drawing of curves with various line widths in hit-mapped graphics systems. It is best done with circles of suitable diameter so that a constant line width, independent of the curve's slope, is obtained. Allowing all possible integer diameters corresponding to all possible integer line widths results in every second width having an odd value. Thus, the underlying circle algorithm must be able to handle both integer and half-integer radii. Our circle-brush algorithm handles both situations and produces a â\u20ACœbest approximationâ\u20AC?: All grid points produced simultaneously minimize (1) the residual, (2) the Euclidean distance to the circle, and (3) the displacement along the grid line from the intersection with the circle. Our circle-brush algorithm was developed in careful consideration of its implementation in VLSI."}