{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9600","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/9600","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/9600","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/9601","fieldValue":" There has been a rapid growth of services based on session control. Session-based services comprise multimedia conferences, Internet telephone calls, instant messaging, and similar applications consisting of one or more media types such as audio and video. Deployment examples include session control services as part of the IP multimedia subsystem (IMS), in the third-generation mobile networks. High service dependability in session control systems is achieved by introducing redundancy, e.g., through reliable server pooling (RSerPool) or clustering. Namely, session control servers are multiplied in server sets. Performance of such replicated session control servers is quantified by transaction control time. Thus, reducing transaction control time enhances performance. Server selection policies (SSP) are crucial in achieving this goal. The maximum availability (MA) SSP is proposed to improve session control performance in scenarios with server and communication failures. Based on a status vector, MA aims at maximizing the probability of successful transaction with the current transmission, thereby minimizing the average number of attempted servers until success. MA is applicable in a broad range of IP-based systems and services, and it is independent of the fault-tolerant platform. A simple protocol extension is proposed in order to integrate MA into the RSerPool fault-tolerant architecture. In addition, an analytic model is derived based on certain system model assumptions. Analytic and simulation results show that transaction control time is considerably reduced with MA as opposed to when using traditional round robin."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9601","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/9601","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/9601","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/9602","fieldValue":" Supporting fast restoration for general mesh topologies with minimal network over-build is a technically challenging problem. Traditionally, ring-based SONET networks have offered close to 50 ms restoration at the cost of requiring 100% over-build. Recently, fast (local) reroute has gained momentum in the context of MPLS networks. Fast reroute, when combined with pre-provisioning of protection capacities and bypass tunnels, enables faster restoration times in mesh networks. Pre-provisioning has the additional advantage of greatly simplifying network routing and signaling. Thus, even for protected connections, online routing can now be oblivious to the offered protection, and may only involve single shortest path computations. In this paper, we are interested in the problem of reserving the least amount of the network capacity for protection, while guaranteeing fast (local) reroute-based restoration for all the supported connections. We show that the problem is NP-complete, and we present efficient approximation algorithms for the problem. The solution output by our algorithms is guaranteed to use at most twice the protection capacity, compared to any optimal solution. These guarantees are provided even when the protection is for multiple link failures. In addition, the total amount of protection capacity reserved by these algorithms is just a small fraction of the amount reserved by existing ring-based schemes (e.g., SONET), especially on dense networks. The presented algorithms are computationally efficient, and can even be implemented on the network elements. Our simulation, on some standard core networks, show that our algorithms work well in practice as well."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9602","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.subject","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/9602","fieldValue":"MPLS"}