{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/17016","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/17016","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/1018","fieldValue":" The issues involved in designing the floating-point part of a programming language are discussed. Looking at the language specifications for most existing languages might suggest that this design involves only trivial issues, such as whether to have one or two types of REALs or how to name the functions that convert from INTEGER to REAL. It is shown that there are more significant semantic issues involved. After discussing the trade-offs for the major design decisions, they are illustrated by presenting the design of the floating-point part of the Modula-3 language."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1018","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1018","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/1186","fieldValue":"Vasilakos, Athanasios V"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/1186","fieldValue":" In Ambient Intelligence (AmI) vision, people should be able to seamlessly and unobtrusively use and configure the intelligent devices and systems in their ubiquitous computing environments without being cognitively and physically overloaded. In other words, the user should not have to program each device or connect them together to achieve the required functionality. However, although it is possible for a human operator to specify an active space configuration explicitly, the size, sophistication, and dynamic requirements of modern living environment demand that they have autonomous intelligence satisfying the needs of inhabitants without human intervention. This work presents a proposal for AmI fuzzy computing that exploits multiagent systems and fuzzy theory to realize a long-life learning strategy able to generate context-aware-based fuzzy services and actualize them through abstraction techniques in order to maximize the users' comfort and hardware interoperability level. Experimental results show that proposed approach is capable of anticipating user's requirements by automatically generating the most suitable collection of interoperable fuzzy services."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1186","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1186","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2611","fieldValue":" We propose new succinct representations of ordinal trees and match various space\/time lower bounds. It is known that any n-node static tree can be represented in 2n &plus; o(n) bits so that a number of operations on the tree can be supported in constant time under the word-RAM model. However, the data structures are complicated and difficult to dynamize. We propose a simple and flexible data structure, called the range min-max tree, that reduces the large number of relevant tree operations considered in the literature to a few primitives that are carried out in constant time on polylog-sized trees. The result is extended to trees of arbitrary size, retaining constant time and reaching 2n &plus; O(n\/polylog(n)) bits of space. This space is optimal for a core subset of the operations supported and significantly lower than in any previous proposal. For the dynamic case, where insertion\/deletion (indels) of nodes is allowed, the existing data structures support a very limited set of operations. Our data structure builds on the range min-max tree to achieve 2n &plus; O(n\/log n) bits of space and O(log n) time for all operations supported in the static scenario, plus indels. We also propose an improved data structure using 2n &plus; O(nlog log n\/log n) bits and improving the time to the optimal O(log n\/log log n) for most operations. We extend our support to forests, where whole subtrees can be attached to or detached from others, in time $O(log^1&plus;&epsi; n) for any &epsi; > 0. Such operations had not been considered before. Our techniques are of independent interest. An immediate derivation yields an improved solution to range minimum\/maximum queries where consecutive elements differ by ± 1, achieving n &plus; O(n\/polylog(n)) bits of space. A second one stores an array of numbers supporting operations sum and search and limited updates, in optimal time O(log n\/log log n). A third one allows representing dynamic bitmaps and sequences over alphabets of size σ, supporting rank\/select and indels, within zero-order entropy bounds and time O(log n log σ\/(log log n)2$) for all operations. This time is the optimal O(log n\/log log n) on bitmaps and polylog-sized alphabets. This improves upon the best existing bounds for entropy-bounded storage of dynamic sequences, compressed full-text self-indexes, and compressed-space construction of the Burrows-Wheeler transform."}