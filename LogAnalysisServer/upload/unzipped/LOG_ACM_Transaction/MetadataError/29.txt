{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/11079","fieldValue":"Ritzhaupt, Albert D"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11079","fieldValue":" This article provides an overview of the challenges in implementing a game development course with limited resources in computing curricula. An approach to a holistic game development course is outlined in terms of its organization, software, and instructional methods. The course had 23 students enrolled in its first offering and was systematically evaluated in light of the approach using multiple sources of data. Descriptive statistics and measures of internal consistency reliability are provided. Three important findings resulted from this research: 1) a game development course can be implemented with limited institutional monetary support for a reasonable cost per student, 2) cooperation and competition can be effectively integrated into a game development course as instructional strategies, and 3) integrated lecture and computer lab sessions with cooperative learning is an effective instructional method for a game development course. Finally, insights and lessons learned are provided to assist educators in creating their own game development courses."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11079","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11079","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/11080","fieldValue":"Caspersen, Michael E"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11080","fieldValue":" Programming is recognized as one of seven grand challenges in computing education. Decades of research have shown that the major problems novices experience are composition-based---they may know what the individual programming language constructs are, but they do not know how to put them together. Despite this fact, textbooks, educational practice, and programming education research hardly address the issue of teaching the skills needed for systematic development of programs. We provide a conceptual framework for incremental program development, called Stepwise Improvement, which unifies best practice in modern software development such as test-driven development and refactoring with the prevailing perspective of programming methodology, stepwise refinement. The conceptual framework enables well-defined characterizations of incremental program development. We utilize the conceptual framework to derive a programming process, STREAM, designed specifically for novices. STREAM is a carefully down-scaled version of a full and rich agile software engineering process particularly suited for novices learning object-oriented programming. In using it we hope to achieve two things: to help novice programmers learn faster and better while at the same time laying the foundation for a more thorough treatment of more advanced aspects of software engineering. In this article, two examples demonstrate the application of STREAM. The STREAM process has been taught in the introductory programming courses at our universities for the past three years and the results are very encouraging. We report on a small, preliminary study evaluating the learning outcome of teaching STREAM. The study indicates a positive effect on the development of studentsâ\u20AC™ process competences."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11080","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11080","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11081","fieldValue":" Undergraduate research experiences are promoted and funded for their potential in increasing studentsâ\u20AC™ likelihood of pursuing graduate degrees, increasing their confidence, and expanding their awareness of their discipline and career opportunities. These outcomes, however, depend on the social, organizational, and intellectual conditions under which students conduct research. Large-scale comparative studies suggest that computer science undergraduate researchers participate in fewer of the activities that lead to membership in a â\u20ACœculture of research.â\u20AC? This interview-based study illuminates the experiences of both undergraduates and their faculty research mentors in computer science summer and academic year programs. Twenty-five undergraduates and 31 faculty mentors, the majority women, were interviewed. Their stories reveal best and worst case research conditions for students, the special benefits to women who have experienced harassment in their classes, unconscious biases of faculty, the wisdom of faculty who guide undergraduates to successful research outcomes, and facultyâ\u20AC™s perceptions of benefits for themselves, their departments, and the students they mentor."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11081","fieldValue":"ACM"}