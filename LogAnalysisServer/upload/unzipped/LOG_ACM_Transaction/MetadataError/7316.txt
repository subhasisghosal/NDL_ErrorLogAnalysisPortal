{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9450","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/9450","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/9450","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/9451","fieldValue":" This paper proposes novel resource sharing schemes for differentiated services (DiffServ) networks, to achieve both high resource utilization and quality of service (QoS) guarantee. Service level agreements (SLAs) are negotiated at network boundaries and supported by path-oriented resource mapping within the network. The recently proposed SLA management scheme based on virtual partitioning (Bouillet et al., 2002) allows overloaded SLAs to exploit the spare capacity of underloaded SLAs for efficient resource utilization, however, at the the cost of possible SLA violation of the underloaders. In the bandwidth borrowing scheme proposed here, the dedicated bandwidth for underloaded SLAs is determined and adaptively adjusted at network boundaries according to the actual traffic load and QoS policies; the available spare capacity is then properly distributed to related links for lending to others. On the other hand, the traffic flows admitted with borrowed bandwidth are tagged and may be preempted later when the original bandwidth owner needs to claim back the resources. Through a detailed implementation design and extensive computer simulation results we show that, by bandwidth borrowing, both SLA compliance and high resource utilization can be achieved in various load conditions, with some side benefits such as call-level service differentiation, small admission overhead, and convenience for policy-based management. In addition, we propose a distributed bandwidth pushing scheme that can dynamically adjust the spare bandwidth distribution over the network. Combining bandwidth pushing with bandwidth borrowing, the resource utilization can be further improved."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/9451","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/9451","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/9451","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/1852","fieldValue":" SIMD vector units implement only a subset of the operations used by vectorizing compilers, and there are multiple conflicting techniques to legalize arbitrary vector types into register-sized data types. Traditionally, type legalization is performed using a set of predefined rules, regardless of the operations used in the program. This method is not suitable to sparse SIMD instruction sets and often prevents the vectorization of programs. In this work we introduce a new technique for type legalization, namely vector element promotion, as well as a hybrid method for combining multiple techniques of type legalization. Our hybrid type legalization method makes decisions based on the knowledge of the available instruction set as well as the operations used in the program. Our experimental results demonstrate that program-dependent hybrid type legalization improves the execution time of vector programs, outperforms the existing legalization method, and allows the vectorization of workloads which were not vectorized before."}{"fieldName":"dc.subject","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1852","fieldValue":"SIMD"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1852","fieldValue":"ACM"}