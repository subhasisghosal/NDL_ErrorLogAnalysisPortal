{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/6417","fieldValue":"ACM"}{"fieldName":"dc.relation.haspart","informationCode":"ERR_FORMAT_HASPART","handle":"12345678_acm\/1537","fieldValue":"[{\"visible\":false,\"sortKey\":\"January 2016\",\"expandable\":true,\"handle\":\"12345678_acm\/1587\",\"title\":\"Issue 4, January 2016\"},{\"visible\":false,\"sortKey\":\"December 2015\",\"expandable\":true,\"handle\":\"12345678_acm\/1586\",\"title\":\"Issue 4, December 2015\"},{\"visible\":false,\"sortKey\":\"October 2015\",\"expandable\":true,\"handle\":\"12345678_acm\/1585\",\"title\":\"Issue 3, October 2015\"},{\"visible\":false,\"sortKey\":\"July 2015\",\"expandable\":true,\"handle\":\"12345678_acm\/1584\",\"title\":\"Issue 2, July 2015\"},{\"visible\":false,\"sortKey\":\"April 2015\",\"expandable\":true,\"handle\":\"12345678_acm\/1583\",\"title\":\"Issue 1, April 2015\"}]"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/6418","fieldValue":" This article explores methods to reconfigure infinite impulse response (IIR) filters in processes that utilize computer resource management. A high-performance mode uses a full-length IIR filter, while low resources or a desire to conserve power triggers a low-performance mode where a smaller length filter is used. Two alternatives for algorithms are explored: switching between filter banks of varying lengths, and anytime filters where the later stages can be skipped if computational resources are scarce. Two main challenges are addressed in this article. The first is how to configure an IIR filter as an anytime algorithm, and the second is how to initialize the states of the filters in order to mitigate transients induced by reconfiguration. The performance and feasibility of several common transient management schemes are investigated for use in this application. It is found that an anytime IIR filter outperforms the filter banks in almost every case studied due to its inherently smaller transients and the fact that the reconfiguration happens at the speed of resource management and not at a lower speed typically associated with reconfiguration due to physical system properties."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/6418","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/6418","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/6419","fieldValue":" We have implemented a two-dimensional systolic array QR decomposition on a Xilinx Virtex5 FPGA using the Givens rotation algorithm. QR decomposition is a key step in many DSP applications including sonar beamforming, channel equalization, and 3G wireless communication. Compared to previous work that implements Givens rotations using a one-dimensional systolic array, our implementation uses a truly two-dimensional systolic array architecture. As a result, latency scales well for larger matrices. In addition, prior work avoids divide and square root operations in the Givens rotation algorithm by using special operations such as CORDIC or special number systems such as the logarithmic number system (LNS). In contrast, our design uses straightforward floating-point divide and square root implementations, which makes it easier to be used within a larger system. In our design, the input matrix size can be configured at compile time to many different sizes, making it easily scalable to future large FPGAs or over multiple FPGAs. The QR module is fully pipelined with a throughput of over 130MHz for the IEEE single-precision floating-point format. The peak performance for a 12 Ã\u2014 12 input matrix is approximately 35 GFLOPs."}{"fieldName":"dc.subject","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/6419","fieldValue":"FPGA"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/6419","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/6419","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/6420","fieldValue":" The challenges posed by complex real-time digital image processing at high resolutions cannot be met by current state-of-the-art general-purpose or DSP processors, due to the lack of processing power. On the other hand, large arrays of FPGA-based accelerators are too inefficient to cover the needs of cost sensitive professional markets. We present a new architecture composed of a network of configurable flexible weakly programmable processing elements, Flexible Weakly programmable Advanced Film Engine (FlexWAFE). This architecture delivers both programmability and high efficiency when implemented on an FPGA basis. We demonstrate these claims using a professional next-generation noise reducer with more than 170G image operations\/s at 80&percnt; FPGA area utilization on four Virtex II-Pro FPGAs. This article will focus on the FlexWAFE architecture principle and implementation on a PCI-Express board."}