{"fieldName":"dc.subject","informationCode":"WARN_TEXT_LENGTH_LARGE","handle":"12345678_acm\/4821","fieldValue":"DNA,Support vector machines,Bioinformatics,Accuracy,Training data,Prediction algorithms,DNA splice sites.,Evolutionary computation,genetic programming,feature extraction and construction,classifier design and evaluation,data mining"}{"fieldName":"dc.title","informationCode":"WARN_TEXT_LENGTH_LARGE","handle":"12345678_acm\/4821","fieldValue":"An Evolutionary Algorithm Approach for Feature Generation from Sequence Data and Its Application to DNA Splice Site Prediction"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/4821","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/4821","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/1037","fieldValue":" Sets are a fundamental abstraction widely used in programming. Many representations are possible, each offering different advantages. We describe a representation that supports constant-time implementations of clear-set, add-member, and delete-member. Additionally, it supports an efficient forall iterator, allowing enumeration of all the members of a set in time proportional to the cardinality of the set.We present detailed comparisons of the costs of operations on our representation and on a bit vector representation. Additionally, we give experimental results showing the effectiveness of our representation in a practical application: construction of an interference graph for use during graph-coloring register allocation.While this representation was developed to solve a specific problem arising in register allocation, we have found it useful throughout our work, especially when implementing efficient analysis techniques for large programs. However, the new representation is not a panacea. The operations required for a particular set should be carefully considered before this representation, or any other representation, is chosen."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1037","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1037","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/1411","fieldValue":"Edwards, Alistair D N"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/1411","fieldValue":" This is a personal response to rereading the Glinert and York [1992] article â\u20ACœComputers and People with Disabilities.â\u20AC? Comparing the world of assistive technology as it was in 1992 and as it now appears is instructive in terms of the things which have changed --- and those which have not. The technology has certainly developed. This applies both to the mainstream and to the assistive technology which aims to make the mainstream accessible. So, in 1992, the GUI was a threat to visually impaired computer users; now there are powerful screen readers available. Yet what does not appear to have changed much is the fact that assistive technologies continue to lag behind the mainstream, constantly having to â\u20ACœcatch up.â\u20AC? Also, while there has been some increase in awareness of the need for accessibility, there is still scope for that awareness to be translated into action."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1411","fieldValue":"ACM"}