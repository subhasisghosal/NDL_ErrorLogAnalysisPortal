{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/5039","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/5039","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/5040","fieldValue":"Nye, Tom M W"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/5040","fieldValue":" Most phylogenetic analyses result in a sample of trees, but summarizing and visualizing these samples can be challenging. Consensus trees often provide limited information about a sample, and so methods such as consensus networks, clustering and multidimensional scaling have been developed and applied to tree samples. This paper describes a stochastic algorithm for constructing a principal geodesic or line through treespace which is analogous to the first principal component in standard principal components analysis. A principal geodesic summarizes the most variable features of a sample of trees, in terms of both tree topology and branch lengths, and it can be visualized as an animation of smoothly changing trees. The algorithm performs a stochastic search through parameter space for a geodesic which minimizes the sum of squared projected distances of the data points. This procedure aims to identify the globally optimal principal geodesic, though convergence to locally optimal geodesics is possible. The methodology is illustrated by constructing principal geodesics for experimental and simulated data sets, demonstrating the insight into samples of trees that can be gained and how the method improves on a previously published approach. A java package called GeoPhytter for constructing and visualizing principal geodesics is freely available from www.ncl.ac.uk\/ntmwn\/geophytter."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/5040","fieldValue":"{\"eissn\":\"\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/5040","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/5040","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/5041","fieldValue":"El-Sayed, Ayman"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/5041","fieldValue":" A finite-state machine (FSM) is an abstract mathematical model of computation used to design both computer programs and sequential logic circuits. Considered as an abstract model of computation, FSM is weak; it has less computational power than some other models of computation such as the Turing machine. This paper discusses the finite-state automata based on Deoxyribonucleic Acid (DNA) and different implementations of DNA FSMs. Moreover, a comparison was made to clarify the advantages and disadvantages of each kind of presented DNA FSMS. Since it is a major goal for nanoscince, nanotechnology and super molecular chemistry is to design synthetic molecular devices that are programmable and run autonomously. Programmable means that the behavior of the device can be modified without redesigning the whole structure. Autonomous means that it runs without externally mediated change to the work cycle. In this paper we present an odd Parity Checker Prototype Using DNAzyme FSM. Our paper makes use of a known design for a DNA nanorobotic device due to Reif and Sahu [1] for executing FSM computations using DNAzymes. The main contribution of our paper is a description of how to program that device to do a FSM computation known as odd parity checking. We describe in detail finite state automaton built on 10-23 DNAzyme, and give its procedure of design and computation. The design procedure has two major phases: designing the language potential alphabet DNA strands, and depending on the first phase to design the DNAzyme possible transitions."}{"fieldName":"dc.identifier.other","informationCode":"ERR_NULL_VALUE","handle":"12345678_acm\/5041","fieldValue":"{\"eissn\":\"\"}"}