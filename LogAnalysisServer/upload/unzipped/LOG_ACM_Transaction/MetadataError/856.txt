{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/13483","fieldValue":" Assertion-based verification (ABV) for IP blocks given as synchronous RTL (register transfer level) descriptions has now widely gained acceptance. The challenge addressed here is ABV for systems on chip (SoC) modeled at the system level in SystemC TLM (Transactional Level Modeling). Requirements to be verified at this level of abstraction usually express temporal constraints on the interactions and communications in the SoC. We use the IEEE standard language PSL to formalize these temporal assertions which represent properties on communication actions and their parameters. Auxiliary variables are often indispensable for this formalization, but their use may induce semantic issues. This article discusses this matter, analyzes various existing approaches and proposes a summary of their advantages and shortcomings. They are also compared to our syntactic and semantic framework, implemented in a verification tool. The proposed operational semantics has the advantages of being simple and intuitive while supporting both global and local auxiliary variables. Experimental results on industrial case studies illustrate its applicability."}{"fieldName":"dc.title","informationCode":"WARN_TEXT_LENGTH_LARGE","handle":"12345678_acm\/13483","fieldValue":"Auxiliary Variables in Temporal Specifications: Semantic and Practical Analysis for System-Level Requirements"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/13483","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/13483","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/13484","fieldValue":"Yan, Jin-Tai"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/13484","fieldValue":" Due to the inappropriate assignment of bump pads or the improper assignment of I\/O buffers, the constructed buffered I\/O signals in an area-I\/O flip-chip design may yield longer maximum delay. In this article, the problem of assigning performance-driven buffered I\/O signals in an area-I\/O flip-chip design is first formulated. Furthermore, the assignment of the buffered I\/O signals can be divided into two sequential phases: Construction of performance-driven I\/O signals and Assignment of timing-constrained I\/O buffers. Finally, an efficient matching-based approach is proposed to construct the performance-driven I\/O signals for the given I\/O pins and assign the timing-constrained I\/O buffers into the constructed I\/O signals in the assignment of the buffered I\/O signals in an area-I\/O flip-chip design. Compared with the experimental results of seven tested circuits in the Elmore delay model, the experimental results show that the matching-based assignment in our proposed approach can reduce 3.56&percnt; of the total path delay, 9.72&percnt; of the maximum input delay, 5.90&percnt; of the input skew, 5.64&percnt; of the maximum output delay, and 6.25&percnt; of the output skew on average by reassigning the I\/O buffers. Our proposed approach can further reduce 38.89&percnt; of the total path delay, 44.00&percnt; of the maximum input delay, 49.13&percnt; of the input skew, 44.93&percnt; of the maximum output delay, and 50.82&percnt; of output skew on average by reconstructing the I\/O signals and reassigning the I\/O buffers into the I\/O signals. Compared with the experimental results of seven tested circuits in Peng's [Peng et al. 2006] publication, the experimental results show that our proposed matching-based approach can further reduce 71.06&percnt; of the total path delay, 67.83&percnt; of the maximum input delay, 59.84&percnt; of the input skew, 68.87&percnt; of the maximum output delay, and 61.46&percnt; of the output skew on average. On the other hand, compared with the experimental results of five tested circuits in Lai's [Lai and Chen 2008] publication, the experimental results show that our proposed approach can further reduce 75.36&percnt; of the total path delay, 48.94&percnt; of the input skew, and 52.80&percnt; of the output skew on the average."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/13484","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/13484","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/13485","fieldValue":" The size required to store an array is crucial for an embedded system, as it affects the memory size, the energy per memory access, and the overall system cost. Existing techniques for finding the minimum number of resources required to store an array are less efficient for codes with large loops and not regularly occurring memory accesses. They have to approximate the accessed parts of the array leading to overestimation of the required resources. Otherwise, their exploration time is increased with an increase over the number of the different accessed parts of the array. We propose a methodology to compute the minimum resources required for storing an array which keeps the exploration time low and provides a near-optimal result for regularly and non-regularly occurring memory accesses and overlapping writes and reads."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/13485","fieldValue":"ACM"}