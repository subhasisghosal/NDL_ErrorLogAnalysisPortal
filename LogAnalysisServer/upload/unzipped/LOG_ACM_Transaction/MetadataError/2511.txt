{"fieldName":"dc.title","informationCode":"WARN_TEXT_LENGTH_LARGE","handle":"12345678_acm\/18495","fieldValue":"Algorithm 638: INTCOL and HERMCOL: collocation on rectangular domains with bicubic hermite polynomials"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18495","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18495","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/2736","fieldValue":"Kawarabayashi, Ken-Ichi"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2736","fieldValue":" In the maximum edge-disjoint paths problem, we are given a graph and a collection of pairs of vertices, and the objective is to find the maximum number of pairs that can be routed by edge-disjoint paths. An r-approximation algorithm for this problem is a polynomial-time algorithm that finds at least OPT\/r edge-disjoint paths, where OPT denotes the maximum possible number of pairs that can be routed in a given instance. For a long time, an $O(n^Â½-approximation algorithm has been best known for this problem even if a congestion of two is allowed, that is, each edge is allowed to be used in at most two of the paths. In this article, we give a randomized O(n&frac;37 Ä\u2039 poly(log n))-approximation algorithm with congestion two. This is the first result that breaks the O(nÂ½)-approximation algorithm. In particular, we prove the following: (1) If we have a (randomized) polynomial-time algorithm for finding Î©(OPT&frac1p \/polylog(n)) edge-disjoint paths for some p > 1, then we can give a randomized O(nÂ½-Î±)-approximation algorithm for the edge-disjoint paths problem by using Rao-Zhouâ\u20AC™s algorithm for some Î± > 0. (2) Based on the Chekuri-Khanna-Shepherd well-linked decomposition, we show that there is a randomized algorithm for finding Î©(OPTÂ¼ \/(log n)&frac32;$) edge-disjoint paths connecting given terminal pairs with congestion two. Our framework for this algorithm is more general in the following sense. Indeed, the above two ingredients also work for the maximum edge-disjoint paths problem (with congestion one) if there is a (randomized) polynomial-time algorithm for finding Î©(OPT&frac;1p) edge-disjoint paths connecting given terminal pairs for some p > 1."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2736","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2736","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18496","fieldValue":" We describe a new package, UNCMIN, for finding a local minimizer of a real valued function of more than one variable. The novel feature of UNCMIN is that it is a modular system of algorithms, containing three different step selection strategies (line search, dogleg, and optimal step) that may be combined with either analytic or finite difference gradient evaluation and with either analytic, finite difference, or BFGS Hessian approximation. We present the results of a comparison of the three step selection strategies on the problems in More, Garbow, and Hillstrom in two separate cases: using finite difference gradients and Hessians, and using finite difference gradients with BFGS Hessian approximations. We also describe a second package, REVMIN, that uses optimization algorithms identical to UNCMIN but obtains values of user-supplied functions by reverse communication."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18496","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18496","fieldValue":"ACM"}