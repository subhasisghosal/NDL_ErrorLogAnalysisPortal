{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/19141","fieldValue":" We describe four challenging N-body test problems involving the Sun and planets and use them to compare the performance of nine nonsymplectic and two symplectic integrators. Each problem has a long interval of integration and two have non-Newtonian gravitational interactions. The emphasis in our comparison is on the accuracy of the solution, including the phase information produced by nonsympletic methods; the symplectic methods have been included to provide a contrast. Long intervals of integration necessitate small local error tolerances for the nonsymplectic integrators.Among variable-stepsize integrators, RKNINT requires the least CPU time on the two problems with Newtonian interactions and DIVA the least CPU time on the other two problems for the intervals of integration we used. We find that the error growth on some integrations is noticeably slower than predicted by asymptotic analysis of the truncation and round-off error. Our comparisons suggest that the numerical solutions near the end of a billion year simulation in double precision with variable-stepsize nonsymplectic methods would have poor accuracy."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/19141","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/19141","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/19142","fieldValue":" We present the design of a high-performance object-oriented framework that enables the rapid development and usage of efficient, scalable, and portable implementations of multilevel preconditioners for distributed sparse real matrices, in both serial and (massively) parallel environments. The main feature of the proposed framework is the use of several programming paradigms for the different implementation layers, with a strong emphasis on object-oriented classes and operator overloading for the top layer, and optimized FORTRAN and C code for the layers underneath. We describe an implementation of the proposed framework that is based on the ML library, the algebraic multilevel preconditioning package of Trilinos, which supports state-of-the-art parallel smoothed aggregation methods, and can be used to define general algebraic and geometric multilevel and multigrid preconditioners and solvers. The article demonstrates that we can take advantage of object-oriented programming and operator overloading to obtain intuitive, easy-to-read, and easy-to-develop codes that are at the same time efficient and scalable. Several numerical experiments obtained on serial and parallel computers show that the overhead required by the object-oriented layer is very modest, therefore allowing developers to focus on the new algorithms they are developing and testing, rather than on implementation details."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/19142","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/19142","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/1204","fieldValue":" Ubiquitous and pervasive computing deals with the design of autonomous and adaptive systems and services that interact with the closest environment enhanced by context awareness and emergence functionalities. In this article, we investigate the relationships between the environment, the actions (services), and the selection algorithm that is guaranteed to take the system to a state that suits a stochastically changing environment. Making the assumption that peering relationships between potential actions can be specified by an affinity network, the action selection mechanism is translated into an iterative algorithm that lets each activity update its strength until it converges to a solution. In pervasive environments, where services and devices interfere with each other, the proposed action selection approach prevents unexpected and undesirable behaviors or oscillating loops in a such dynamic environment."}{"fieldName":"dc.identifier.other","informationCode":"ERR_FORMAT_DOI","handle":"12345678_acm\/1204","fieldValue":"{\"doi\":\"1921641.1921651\"}"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1204","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1204","fieldValue":"ACM"}