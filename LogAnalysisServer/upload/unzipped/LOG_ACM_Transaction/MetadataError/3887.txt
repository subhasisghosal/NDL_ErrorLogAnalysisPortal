{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/22584","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/1234","fieldValue":" Intelligent agents often have the same or similar tasks and sometimes they cooperate to solve a given problem. These agents typically know how to observe their local environment and how to react on certain observations, for instance, and this knowledge may be represented in form of rules. However, many environments are dynamic in the sense that from time to time novel rules are required or old rules become obsolete. In this article we propose and investigate new techniques for knowledge acquisition by novelty detection and reaction as well as obsoleteness detection and reaction that an agent may use for self-adaptation to new situations. For that purpose we consider classifiers based on probabilistic rules. Premises of new rules are learned autonomously while conclusions are either obtained from human experts or from other agents which have learned appropriate rules in the past. By means of knowledge exchange, agents will efficiently be enabled to cope with situations they were not confronted with before. This kind of collaborative intelligence follows the human archetype: Humans are able to learn from each other by communicating learned rules. We demonstrate some properties of the knowledge acquisition techniques using artificial data as well as data from the field of intrusion detection."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1234","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1234","fieldValue":"ACM"}{"fieldName":"dc.relation.haspart","informationCode":"ERR_FORMAT_HASPART","handle":"12345678_acm\/3149","fieldValue":"[{\"visible\":false,\"sortKey\":\"September 2015\",\"expandable\":true,\"handle\":\"12345678_acm\/3198\",\"title\":\"Issue 4(Special Issue SAP 2015), September 2015\"},{\"visible\":false,\"sortKey\":\"July 2015\",\"expandable\":true,\"handle\":\"12345678_acm\/3197\",\"title\":\"Issue 3, July 2015\"},{\"visible\":false,\"sortKey\":\"April 2015\",\"expandable\":true,\"handle\":\"12345678_acm\/3196\",\"title\":\"Issue 2, April 2015\"},{\"visible\":false,\"sortKey\":\"March 2015\",\"expandable\":true,\"handle\":\"12345678_acm\/3195\",\"title\":\"Issue 1, March 2015\"}]"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/22585","fieldValue":" Signature matching is a method for organizing, navigating through, and retrieving from software libraries. We consider two kinds of software library componentsâ\u20AC\u201Dfunctions and modulesâ\u20AC\u201Dand hence two kinds of matchingâ\u20AC\u201Dfunction matching and module matching. The signature of a function is simply its type; the signature of a module is a multiset of user-defined types and a multiset of function signatures. For both functions and modules, we consider not just exact match but also various flavors of relaxed match. We describe various applications of signature matching as a tool for using software libraries, inspired by the use of our implementation of a function signature matcher written in Standard ML."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/22585","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/22585","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/22586","fieldValue":" The problem of analyzing concurrent systems has been investigated by many researchers, and several solutions have been proposed. Among the proposed techniques, reachability analysisâ\u20AC\u201Dsystematic enumeration of reachable states in a finite-state modelâ\u20AC\u201Dis attractive because it is conceptually simple and relatively straightforward to automate and can be used in conjunction with model-checking procedures to check for application-specific as well as general properties. This article shows that the nature of the translation from source code to a modeling formalism is of greater practical importance than the underlying formalism. Features identified as pragmatically important are the representation of internal choice, selection of a dynamic or static matching rule, and the ease of applying reductions. Since combinatorial explosion is the primary impediment to application of reachability analysis, a particular concern in choosing a model is facilitating divide-and-conquer analysis of large programs. Recently, much interest in finite-state verification systems has centered on algebraic theories of concurrency. Algebraic structure can be used to decompose reachability analysis based on a flowgraph model. The semantic equivalence of graph and Petri net-based models suggests that one ought to be able to apply a similar strategy for decomposing Petri nets. We describe how category-theoretic treatments of Petri nets provide a basis for decomposition of Petri net reachability analysis."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/22586","fieldValue":"ACM"}