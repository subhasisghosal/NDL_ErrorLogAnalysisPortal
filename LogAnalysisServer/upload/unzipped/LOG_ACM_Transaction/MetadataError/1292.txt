{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/15020","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/15021","fieldValue":" Problems in geometry often possess symmetry properties that may be exploited in order to develop solutions. Algorithms based on these symmetry properties will frequently use geometric transformations to transform one case into another (symmetric) case. One advantage of this approach is that the algorithm avoids enumeration of cases and thus is shorter and generally easier to read. One disadvantage is that some additional execution time is required to perform these transformations. We describe how simple program equivalences may be used as program transformations to eliminate this additional execution time from programs that use geometric transformations. This approach has been used to develop an efficient implementation of a new algorithm for the two-dimensional line-clipping problem."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/15021","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/15021","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/15022","fieldValue":" Discrete Beta-splines arise when a Beta-spline curve is subdivided; that is, extra knots are inserted so that the curve is expressed in terms of a larger number of control vertices and Beta-splines. Their properties and an algorithm for their computation are given in â\u20ACœDiscrete Beta-Splinesâ\u20AC? by Joe (Computer Graphics, vol. 21, pp. 137-144). We prove a stronger version of one of these properties, from which a new algorithm for computing discrete Beta-splines is obtained. This algorithm can also be used to compute discrete B-splines. We give a comparison of operation counts for this algorithm versus other algorithms, and for two methods to compute the new control vertices of Beta-spline and B-spline curves and surfaces."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/15022","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/15022","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/1168","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/1168","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2418","fieldValue":" In this article we further investigate the well-studied problem of finding a perfect matching in a regular bipartite graph. The first nontrivial algorithm, with running time O(mn), dates back to KÃ¶nig's work in 1916 (here m&equals;nd is the number of edges in the graph, 2n is the number of vertices, and d is the degree of each node). The currently most efficient algorithm takes time O(m), and is due to Cole et al. &lsqb;2001&rsqb;. We improve this running time to O(min{m, $n^2.5ln n\/d}); this minimum can never be larger than O(n1.75&sqrt;ln n). We obtain this improvement by proving a uniform sampling theorem: if we sample each edge in a d-regular bipartite graph independently with a probability p &equals; O(n ln n\/d2) then the resulting graph has a perfect matching with high probability. The proof involves a decomposition of the graph into pieces which are guaranteed to have many perfect matchings but do not have any small cuts. We then establish a correspondence between potential witnesses to nonexistence of a matching (after sampling) in any piece and cuts of comparable size in that same piece. Karger's sampling theorem &lsqb;1994a, 1994b&rsqb; for preserving cuts in a graph can now be adapted to prove our uniform sampling theorem for preserving perfect matchings. Using the O(m&sqrt;n) algorithm (due to Hopcroft and Karp &lsqb;1973&rsqb;) for finding maximum matchings in bipartite graphs on the sampled graph then yields the stated running time. We also provide an infinite family of instances to show that our uniform sampling result is tight up to polylogarithmic factors (in fact, up to ln2$ n)."}