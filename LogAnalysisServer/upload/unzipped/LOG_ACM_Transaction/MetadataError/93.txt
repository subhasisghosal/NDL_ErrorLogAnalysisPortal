{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11223","fieldValue":" Experience working in multidisciplinary teams is important both to prepare Computer Science (CS) students for industry and to improve their communication with teammates from disciplines other than their own. This article describes the evolution and results of collaborations among three courses: an undergraduate CS course about user interface design and implementation, an undergraduate Scientific and Technical Communication (STC) course about usability and instructions writing, and a graduate CS\/Human Factors course about user-interface evaluation and usability testing. Students from all three courses work with scientists to complete the scientist-sponsored citizen science Android applications (apps). Students from the undergraduate CS and STC courses form multidisciplinary teams to design and implement apps, while the graduate students consult with the teams by evaluating and user-testing the apps. The collaboration's effectiveness was assessed using student surveys, interviews, and evaluations of student work. This article compares the collaboration within the teams and the coordination with the scientists across two years of activities in order to determine the effectiveness of course modifications. The article concludes with recommendations for improving the collaboration within teams and the coordination with clients in multidisciplinary course projects."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11223","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11223","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/2026","fieldValue":"UnnikrishnanC"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/2026","fieldValue":"Srikant, Y N"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2026","fieldValue":" Graph algorithms have been shown to possess enough parallelism to keep several computing resources busyâ\u20AC\u201Deven hundreds of cores on a GPU. Unfortunately, tuning their implementation for efficient execution on a particular hardware configuration of heterogeneous systems consisting of multicore CPUs and GPUs is challenging, time consuming, and error prone. To address these issues, we propose a domain-specific language (DSL), Falcon, for implementing graph algorithms that (i) abstracts the hardware, (ii) provides constructs to write explicitly parallel programs at a higher level, and (iii) can work with general algorithms that may change the graph structure (morph algorithms). We illustrate the usage of our DSL to implement local computation algorithms (that do not change the graph structure) and morph algorithms such as Delaunay mesh refinement, survey propagation, and dynamic SSSP on GPU and multicore CPUs. Using a set of benchmark graphs, we illustrate that the generated code performs close to the state-of-the-art hand-tuned implementations."}{"fieldName":"dc.subject","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2026","fieldValue":"CUDA"}{"fieldName":"dc.subject","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2026","fieldValue":"GPU"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2026","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2026","fieldValue":"ACM"}