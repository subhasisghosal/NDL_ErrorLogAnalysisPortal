{"fieldName":"dc.subject","informationCode":"ERR_FOUND_HTML_TAG","handle":"12345678_acm\/11097","fieldValue":"Shulman&rsquo;s teacher knowledge base model"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11097","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11097","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2011","fieldValue":" Semiconductor device scaling has made single-ISA heterogeneous processors a reality. Heterogeneous processors contain a number of different CPU cores that all implement the same Instruction Set Architecture (ISA). This enables greater flexibility and specialization, as runtime constraints and workload characteristics can influence which core a given workload is run on. A major roadblock to the further development of heterogeneous processors is the lack of appropriate evaluation metrics. Existing metrics can be used to evaluate individual cores, but to evaluate a heterogeneous processor, the cores must be considered as a collective. Without appropriate metrics, it is impossible to establish design goals for processors, and it is difficult to accurately compare two different heterogeneous processors. We present four new metrics to evaluate user-oriented aspects of sets of heterogeneous cores: localized nonuniformity, gap overhead, set overhead, and generality. The metrics consider sets rather than individual cores. We use examples to demonstrate each metric, and show that the metrics can be used to quantify intuitions about heterogeneous cores."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2011","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2011","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11098","fieldValue":" For many people, computer science is not closely associated with the liberal arts. Yet â\u20ACœliberal artsâ\u20AC? can denote a philosophy of education that emphasizes broadly preparing students for all aspects of their future lives, and as computing becomes more central to the ways in which we think about the world, computer science becomes correspondingly more central in such an education. This, in turn, makes computer science more important in the programs of educational institutions that follow a liberal arts philosophy. This issue of Transactions on Computing Education presents three articles that examine the intersection of computer science and the liberal arts. Walker and Kelemen explore in detail how a liberal arts philosophy complements the needs of computer science education, and how computer science as a discipline fits the goals of a liberal arts philosophy. Bruce et al. present the history of a consortium of computer scientists from liberal arts colleges and the model computer science curricula they have developed for such colleges. Finally, Baldwin et al. describe the concrete computer science programs at five institutions, each with a distinct place in the liberal arts spectrum. We hope that these articles will advance understanding of computer science in the liberal arts, and inspire readers to incorporate liberal arts principles into their own computer science programs."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11098","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11098","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/11099","fieldValue":"Walker, Henry M"}