{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11201","fieldValue":" This article reports the results of a study of the relationship of computer game programming to computational learning (CL). The results contribute to the growing body of knowledge about how to define and measure CL among children by proposing a new concept, Game Computational Sophistication (GCS). We analyzed 231 games programmed by 325 11 and 12 year olds with a range of prior computer experience who attended a voluntary technology class during or after school. Findings suggest that studentsâ\u20AC™ games exhibited a range of GCS: programs composed of sequences of simple programming constructs; programs composed of programming constructs, some of which are used to implement higher-order patterns; and programs composed of game mechanics built from combinations of patterns â\u20ACœgluedâ\u20AC? together with simple programming constructs. We use case studies of studentsâ\u20AC™ games to illustrate how variation in the use and integration of programming constructs, patterns, and game mechanics can be used to demonstrate evidence of CL. The study contributes to an understanding of what CL looks like in middle school, how to assess it, and how game-programming activities might promote CL."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11201","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11201","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/11202","fieldValue":"Meerbaum-Salant, Orni"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/11202","fieldValue":"Ben-Ari, Mordechai"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11202","fieldValue":" Computer science (CS) activities for young students are widely used, particularly visual programming environments. We investigated the use of the Scratch environment for teaching CS concepts to middle school students. In a previous article [Meerbaum-Salant et al. 2013], we reported on the extent to which the CS concepts were successfully learned. In this article, we look at the transition from studying CS with the visual Scratch environment in middle school to studying CS with a professional textual programming language (C# or Java) in secondary school. We found that the programming knowledge and experience of students who had learned Scratch greatly facilitated learning the more advanced material in secondary school: less time was needed to learn new topics, there were fewer learning difficulties, and they achieved higher cognitive levels of understanding of most concepts (although at the end of the teaching process, there were no significant differences in achievements compared to students who had not studied Scratch). Furthermore, there was increased enrollment in CS classes, and students were observed to display higher levels of motivation and self-efficacy. This research justifies teaching CS in general and visual programming in particular in middle schools."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11202","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11202","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/11203","fieldValue":"Macredie, Robert D"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11203","fieldValue":" Teaching programming to beginners is a complex task. In this article, the effects of three factorsâ\u20AC\u201Dchoice of programming language, problem-solving training, and the use of formative assessmentâ\u20AC\u201Don learning to program were investigated. The study adopted an iterative methodological approach carried out across 4 consecutive years. To evaluate the effects of each factor (implemented as a single change in each iteration) on studentsâ\u20AC™ learning performance, the study used quantitative, objective metrics. The findings revealed that using a syntactically simple language (Python) instead of a more complex one (Java) facilitated studentsâ\u20AC™ learning of programming concepts. Moreover, teaching problem solving before programming yielded significant improvements in student performance. These two factors were found to have variable effects on the acquisition of basic programming concepts. Finally, it was observed that effective formative feedback in the context of introductory programming depends on multiple parameters. The article discusses the implications of these findings, identifies avenues for further research, and argues for the importance of studies in computer science education anchored on sound research methodologies to produce generalizable results."}