{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/22586","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/22587","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/22587","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/22588","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/22588","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/22589","fieldValue":" Software process programming is the coding of software processes inexecutable programming languages. Process programming offers manypotential benefits, but their realization has been hampered by a lack ofexperience in the design and use of process programming languages.APPL\/A is a prototype software process programming language developed tohelp gain this experience. It is intended for the coding of programs torepresent and support software processes including process, product, andproject management. APPL\/A is defined as an extension to Ada, to whichit adds persistent programmable relations, concurrent triggers onrelation operations (for reactive control), optionally and dynamicallyenforceable predicates on relations (which may serve as constraints),and composite statements that provide alternative combinations ofserializability, atomicity, and consistency enforcement (for programminghigh-level transactions). APPL\/A has been used to codeengineering-oriented applications, like requirements specification anddesign, as well as management-related activities, such as personnelassignment, task scheduling, and project monitoring. APPL\/A has alsoenabled us to experiment with process program design techniques andarchitectures, including process state reification, intermittent (orpersistent) processes, reflexive and metaprocesses, and multiple-processsystems. Our ability to address a wide range of software processes andprocess characteristics indicates that the APPL\/A constructs representimportant and general capabilities for software processprogramming.â\u20AC\u201D"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/22589","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/22589","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/22590","fieldValue":" Process-oriented models for real-time systems focus on the timing constraints of processes, a focus that can adversely affect resulting designs. Data dependencies between processes create scheduling interactions that limit the times at which processes may execute. Processes are then designed to fit available windows in the overall system schedule. â\u20ACœFitting inâ\u20AC? frequently involves fragmenting processes to fit scheduling windows and\/or designing program and data structures for speed rather than for program comprehension. The result is often a system with very sensitive timing that is hard to understand and maintain. As an alternative to process-oriented design, we present time-sensitive objects: a data-oriented model for real-time systems. The time-sensitive object (TSO) model structures systems as time-constrained data, rather than time constrained processing. Object values are extended to object histories in which a sequence of time constrained values describe the evolution of the object over time. Systems comprise a set of objects and their dependencies. The TSO model describes the effects of object operations and the propagation of change among related objects. Periodic objects, a class of objects within the TSO model, are described in detail in this article and compared with traditional periodic processes. Advantages of time-sensitive objects are identified, including greater scheduling independence when processes have data dependencies, more opportunity for concurrency, and greater inherent capability for detection of and tolerance to timing errors."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/22590","fieldValue":"ACM"}