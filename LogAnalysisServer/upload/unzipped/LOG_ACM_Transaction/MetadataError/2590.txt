{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18725","fieldValue":" BTN is a collection of FORTRAN subroutines for solving unconstrained nonlinear optimization problems. It currently runs on both Intel hypercube computers (distributed memory) and Sequent computers (shared memory), and can take advantage of vector processors if they are available. The software can also be run on traditional computers to simulate the performance of a parallel computer. BTN is a general-purpose algorithm, capable of solving problems with a large numbers of variables and suitable for users inexperienced with parallel computing. It is designed to be as easy to use as traditional algorithms for this problem, requiring only that a (scalar) subroutine be provided to evaluate the objective function and its gradient vector of first derivatives. The algorithm is based on a block truncated-Newton method. Truncated-Newton methods obtain the search direction by approximately solving the Newton equations via some iterative method. The particular method used in BTN is a block version of the Lanczos method, which is numerically stable for nonconvex problems. In addition to the optimization software, a parallel derivative checker is also provided."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18725","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18725","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18726","fieldValue":" A method is presented for generating pseudorandom numbers with a normal distribution. The technique uses the ratio of uniform deviates method discovered by Kinderman and Monahan with an improved set of bounding curves. An optimized quadratic fit reduces the expected number of logarithm evaluations to 0.012 per normal deviate. The method gives a theoretically correct distribution and can be implemented in 15 lines of FORTRAN. Timing and source size comparisons are made with other methods for generating normal deviates. The proposed algorithm compares favorably with some of the better algorithms."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18726","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18726","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18727","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18727","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18728","fieldValue":" A suite of computer programs for the evaluation of Bessel functions and modified Bessel functions of orders zero and one for a vector of real arguments is described. Distinguishing characteristics of these programs are that (a) they are portable across a wide range of machines, and (b) they are vectorized in the case when multiple function evaluations are to be performed. The performance of the new programs are compared with software from the FNLIB collection of Fullerton on which the new software is based."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18728","fieldValue":"ACM"}