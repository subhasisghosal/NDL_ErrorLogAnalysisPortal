{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/15053","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/15053","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/15054","fieldValue":" Pictorial representations significantly enhance our ability to understand complicated relations and structures, which means that information systems strongly require user interfaces that support the visualization of many kinds of information with a wide variety of graphical forms. At present, however, these difficult visualization problems have not been solved. We present a visualization framework for translating abstract objects and relations, typically represented in textual forms, into pictorial representations, and describe a general visualization interface based on this framework. In our framework, abstract objects and relations are mapped to graphical objects and relations by user-defined mapping rules. The kernel of our visualization process is to determine a layout of graphical objects under geometric constraints. A constraint-based object layout system named COOL has been developed to handle this layout problem. COOL introduces the concept of rigidity of constraints in order to reasonably handle, a set of conflicting constraints by use of the least squares method. As applications of our system, we show the generation of kinship diagrams, list diagrams, Nassi-Shneiderman diagrams, and entity-relationship diagrams."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/15054","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/15054","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/15055","fieldValue":" Constructive Solid Geometry (CSG) defines objects as Boolean combinations (CSG trees) of primitive solids. To display such objects, one must classify points on the surfaces of the primitive solids with respect to the resulting composite object, to test whether these points lie on the boundary of the composite object or not. Although the point classification is trivial compared to the surface classification (i.e., the computation of the composite object), for CSG models with a large number of primitive solids (large CSG trees), the point classification may still consume a considerable fraction of the total processing time. This paper presents an overview of existing and new efficiency-improving techniques for classifying points in depth order. The different techniques are compared through experiments."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/15055","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/15055","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2422","fieldValue":" Let C be a class of labeled connected graphs, and let $C_n be a graph drawn uniformly at random from graphs in C that contain exactly n vertices. Denote by b(&ell;; Cn) the number of blocks (i.e., maximal biconnected subgraphs) of Cn that contain exactly &ell; vertices, and let lb(Cn) be the number of vertices in a largest block of Cn. We show that under certain general assumptions on C, Cn belongs with high probability to one of the following categories: (1) lb(Cn) ∼ cn, for some explicitly given c &equals; c(C), and the second largest block is of order $n^α$, where 1 > α &equals; α(C), or (2) lb(Cn) &equals; O(log n), that is, all blocks contain at most logarithmically many vertices. Moreover, in both cases we show that the quantity b(&ell;; Cn$) is concentrated for all &ell; and we determine its expected value. As a corollary we obtain that the class of planar graphs belongs to category (1). In contrast to that, outerplanar and series-parallel graphs belong to category (2)."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2422","fieldValue":"ACM"}