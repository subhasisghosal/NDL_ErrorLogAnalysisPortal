{"fieldName":"dc.subject","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11103","fieldValue":"VHDL"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11103","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11103","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/11104","fieldValue":"Huss, Sorin A"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11104","fieldValue":" Reconfigurable computing is an established field in computer science. Teaching this field to computer science students demands special attention due to limited student experience in electronics and digital system design. This article presents a compact course on reconfigurable processors, which was offered at the Technische Universit√§t Darmstadt, and is intended for instructors aiming to introduce a new course in reconfigurable computing. Therefore, a detailed description of the course structure and content is provided. In contrast to courses on digital system design, which use FPGAs as a case platform, our course places this platform at the center of its focus and highlights its features as a basis for reconfigurable computing. Both declarative knowledge and functioning knowledge are considered in defining learning outcomes based on a novel What-Why-How Model. Lab activities were designated to deepen the functioning knowledge. The written exam is aligned to learning outcomes and shows that most students acquired the intended outcomes."}{"fieldName":"dc.subject","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11104","fieldValue":"VHDL"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11104","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11104","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11105","fieldValue":" This article reports on an experiment undertaken in order to evaluate the effect of a program visualization tool for helping students to better understand the dynamics of object-oriented programs. The concrete tool used was BlueJ‚\u20ACôs debugger and object inspector. The study was done as a control-group experiment in an introductory programming course. The results of the experiment show that the students who used BlueJ‚\u20ACôs debugger did not perform statistically significantly better than the students not using it; both groups profited about the same amount from the exercises given in the experiment. We discuss possible reasons for and implications of this result."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11105","fieldValue":"ACM"}