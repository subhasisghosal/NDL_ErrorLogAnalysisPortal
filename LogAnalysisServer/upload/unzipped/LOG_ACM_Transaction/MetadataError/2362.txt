{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/17753","fieldValue":" In digital image editing software, layers organize images. However, layers are often not explicitly represented in the final image, and may never have existed for a scanned physical painting or a photograph. We propose a technique to decompose an image into layers. In our decomposition, each layer represents a single-color coat of paint applied with varying opacity. Our decomposition is based on the imageâ\u20AC™s RGB-space geometry. In RGB-space, the linear nature of the standard Porter-Duff [1984] â\u20ACœoverâ\u20AC? pixel compositing operation implies a geometric structure. The vertices of the convex hull of image pixels in RGB-space correspond to a palette of paint colors. These colors may be â\u20ACœhiddenâ\u20AC? and inaccessible to algorithms based on clustering visible colors. For our layer decomposition, users choose the palette size (degree of simplification to perform on the convex hull), as well as a layer order for the paint colors (vertices). We then solve a constrained optimization problem to find translucent, spatially coherent opacity for each layer, such that the composition of the layers reproduces the original image. We demonstrate the utility of the resulting decompositions for recoloring (global and local) and object insertion. Our layers can be interpreted as generalized barycentric coordinates; we compare to these and other recoloring approaches."}{"fieldName":"dc.subject","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/17753","fieldValue":"RGB"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/17753","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/17753","fieldValue":"ACM"}{"fieldName":"dc.relation.haspart","informationCode":"ERR_FORMAT_HASPART","handle":"12345678_acm\/17754","fieldValue":"[{\"visible\":false,\"sortKey\":\"2\",\"expandable\":true,\"handle\":\"12345678_acm\/17756\",\"title\":\"ACM Transactions on Modeling and Performance Evaluation of Computing Systems : Volume 2\"},{\"visible\":false,\"sortKey\":\"1\",\"expandable\":true,\"handle\":\"12345678_acm\/17755\",\"title\":\"ACM Transactions on Modeling and Performance Evaluation of Computing Systems : Volume 1\"}]"}{"fieldName":"dc.relation.haspart","informationCode":"ERR_FORMAT_HASPART","handle":"12345678_acm\/17755","fieldValue":"[{\"visible\":false,\"sortKey\":\"September 2016\",\"expandable\":true,\"handle\":\"12345678_acm\/17760\",\"title\":\"Issue 4, September 2016\"},{\"visible\":false,\"sortKey\":\"June 2016\",\"expandable\":true,\"handle\":\"12345678_acm\/17758\",\"title\":\"Issue 2, June 2016\"},{\"visible\":false,\"sortKey\":\"May 2016\",\"expandable\":true,\"handle\":\"12345678_acm\/17759\",\"title\":\"Issue 3, May 2016\"},{\"visible\":false,\"sortKey\":\"March 2016\",\"expandable\":true,\"handle\":\"12345678_acm\/17757\",\"title\":\"Issue 1(Inaugural Issue), March 2016\"}]"}{"fieldName":"dc.relation.haspart","informationCode":"ERR_FORMAT_HASPART","handle":"12345678_acm\/17756","fieldValue":"[{\"visible\":false,\"sortKey\":\"November 2016\",\"expandable\":true,\"handle\":\"12345678_acm\/17761\",\"title\":\"Issue 1, November 2016\"}]"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/17762","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/17762","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2679","fieldValue":" In this article, we show how to compute the width of a dynamic set of low-dimensional points in the streaming model. In particular, we assume that the stream contains both insertions of points and deletions of points to a set S, and the goal is to compute the width of the set S, namely the minimal distance between two parallel hyperplanes sandwiching the point set S. Our algorithm (1 &plus; &epsi;) approximates the width of the set S using space polylogarithmic in the size of S and the aspect ratio of S. This is the first such algorithm that supports both insertions and deletions of points to the set S: previous algorithms for approximating the width of a point set only supported additions [Agarwal et al. 2004; Chan 2006], or a sliding window [Chan and Sadjad 2006]. This solves an open question from the â\u20ACœ2009 Kanpur listâ\u20AC? of open problems in data streams, property testing, and related topics [Indyk et al. 2011]."}