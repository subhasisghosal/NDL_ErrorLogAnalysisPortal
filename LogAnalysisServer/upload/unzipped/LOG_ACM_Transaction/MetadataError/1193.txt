{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/14567","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/14567","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2385","fieldValue":" In this article, we consider isolated cliques and isolated dense subgraphs. For a given graph G, a vertex subset S of size k (and also its induced subgraph G(S)) is said to be c-isolated if G(S) is connected to its outside via less than ck edges. The number c is sometimes called the isolation factor. The subgraph appears more isolated if the isolation factor is smaller. The main result in this work shows that for a fixed constant c, we can enumerate all c-isolated maximal cliques (including a maximum one, if any) in linear time. In more detail, we show that, for a given graph G of n vertices and m edges, and a positive real number c, all c-isolated maximal cliques can be enumerated in time O( $c^4 22cm). From this, we can see that: (1) if c is a constant, all c-isolated maximal cliques can be enumerated in linear time, and (2) if c &equlas; O(log n), all c-isolated maximal cliques can be enumerated in polynomial time. Moreover, we show that these bounds are tight. That is, if f(n) is an increasing function not bounded by any constant, then there is a graph of n vertices and m edges for which the number of f(n)-isolated maximal cliques is superlinear in n + m. Furthermore, if f(n) &equals; Ï\u2030(log n), there is a graph of n vertices and m edges for which the number of f(n)-isolated maximal cliques is superpolynomial in n + m. We next introduce the idea of pseudo-cliques. A pseudo-clique having an average degree Î± and a minimum degree Î², denoted by PC(Î±,Î²), is a set Vâ\u20AC² âŠ\u2020 V such that the subgraph induced by Vâ\u20AC² has an average degree of at least Î± and a minimum degree of at least Î². This article investigates these, and obtains some cases that can be solved in polynomial time and some other cases that have a superpolynomial number of solutions. Especially, we show the following results, where k is the number of vertices of the isolated pseudo-cliques: (1) For any &epsiv; > 0 there is a graph of n vertices for which the number of 1-isolated PC(k âˆ\u2019 (log k)1 + &epsiv;, k\/(log k)1 + &epsiv;$) is superpolynomial, and (2) there is a polynomial-time algorithm which enumerates all c-isolated PC(k âˆ\u2019 log k, k\/log k), for any constant c."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2385","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2385","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/14568","fieldValue":"zsoyolu, Z. Meral"}{"fieldName":"dc.title","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/14568","fieldValue":"Foreword"}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/14568","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/14568","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/14569","fieldValue":" Foster B-trees are a new variant of B-trees that combines advantages of prior B-tree variants optimized for many-core processors and modern memory hierarchies with flash storage and nonvolatile memory. Specific goals include: (i) minimal concurrency control requirements for the data structure, (ii) efficient migration of nodes to new storage locations, and (iii) support for continuous and comprehensive self-testing. Like $B^link-trees, Foster B-trees optimize latching without imposing restrictions or specific designs on transactional locking, for example, key range locking. Like write-optimized B-trees, and unlike Blink$-trees, Foster B-trees enable large writes on RAID and flash devices as well as wear leveling and efficient defragmentation. Finally, they support continuous and inexpensive yet comprehensive verification of all invariants, including all cross-node invariants of the B-tree structure. An implementation and a performance evaluation show that the Foster B-tree supports high concurrency and high update rates without compromising consistency, correctness, or read performance."}