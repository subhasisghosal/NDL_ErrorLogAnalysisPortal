{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2414","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2414","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/14991","fieldValue":" The octree structure represents the space occupied by an object as a juxtaposition of cubes, where the sizes and position coordinates of the cubes are integer powers of 2 and are defined by a recursive decomposition of three-dimensional space. This makes the octree structure highly sensitive to object location and orientation, and the three-dimensional shape of the represented object obscure. It is helpful to be able to see the actual object represented by an octree, especially for visual performance evaluation of octree algorithms. Presented in this paper is a display algorithm that helps visualize the three-dimensional space represented by the octree. Given an octree, the algorithm produces a line drawing of the objects represented by the octree, using parallel projection, from any specified viewpoint with hidden lines removed. The order in which the algorithm traverses the octree has the property that if node x occludes node y, then node x is visited before node y. The algorithm produces a set of long, straight visible edge segments corresponding to the visible surface of the polyhedral object represented by the octree. Examples of some line drawing produced by the algorithm are given. The complexity of the algorithm is also discussed."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/14991","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/14991","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/14992","fieldValue":"McGee, J. Patrick"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/14992","fieldValue":" Background: Traditional paint programs can be criticized on the grounds that they provide fewer degrees of freedom than conventional artistic media. Mouse or tablet input devices usually provide only (x, y) spatial information. Thus most paint programs allow continuous control of the path of a stroke, but render it with a single â\u20ACœbrush shapeâ\u20AC? of fixed size and orientation and use menus, either stationary or appearing, for such tasks as changing â\u20ACœbrushâ\u20AC? shapes. This produces two distinct discontinuities for the artist. First is a physical discontinuity: stopping the act of drawing and making a brush selection using a different physical device, or using the same device to point at a menu selection. A second discontinuity is the cognitive one involved with deciphering the menu contents and making a selection. Although the second may be minimized by using iconic menus, these interruptions of the drawing act make it difficult or impossible for the artist to maintain the kind of continuous control over his or her medium that is required.A particular example of this level of control is the continuous and immediate control that an artist maintains when sketching with a piece of charcoal or a pencil. By manipulating the implement, the artist can change the shape of its contact point with the drawing surface. By changes in pressure exerted with the implement against the surface, it is possible to control both the darkness (value) and width (weight) of the line. All of these factors are controlled by the artist in real time and with continuous feedback.Both Greene [2] and Strassman [4] have presented methods for capturing more of the artist's â\u20ACœgestureâ\u20AC? in the rendered stroke. However, Greene's technique depends on a special-purpose input device and Strassman's does not work in real time. Hill [3] describes a two-handed paintbrush with the off hand controlling a valuator that varies the 'brush width. The technique described here represents another way to provide such control to the user of an interactive paint program. It uses off-the-shelf hardware, is easy to implement, and works in real time. As a single-handed technique, it takes advantage of the artist's skill with existing media."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/14992","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/14992","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/14993","fieldValue":"Storry, D. J T"}