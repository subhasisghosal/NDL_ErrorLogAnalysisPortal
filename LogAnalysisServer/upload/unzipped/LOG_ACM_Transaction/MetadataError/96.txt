{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11230","fieldValue":" Team projects are a way to expose students to conflicting project objectives, and â\u20ACœ[t]here should be a strong real-world element â\u20AC¦ to ensure that the experience is realisticâ\u20AC? [ACM\/IEEE-CS 2015b]. Team projects provide an opportunity for students to put their education into practice and prepare them for their professional careers. The aim of this special issue, and the previous one, is to collect and share evidence about the state of practice of team projects in computing education and to help educators in designing and running team projects. The articles presented in the present issue cover the following topics: real projects for real clients, open source projects, multidisciplinary team projects, student and team assessment, and cognitive and psychological aspects of team projects."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11230","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11230","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11231","fieldValue":" Employers require software engineers to work in teams when developing software systems. It is therefore important for graduates to have experienced teamwork before they enter the job market. We describe an experiential learning exercise that we designed to teach the software engineering process in conjunction with teamwork skills. The underlying teaching strategy applied in the exercise maximises risks in order to provide maximal experiential learning opportunities. The students are expected to work in fairly large, yet short-lived, instructor-assigned teams to complete software engineering tasks. After undergoing the exercise our students form self-selected teams for their capstone projects. In this article, we determine and report on the influence the teaching exercise had on the formation of teams for the capstone project. By analysing data provided by the students through regular peer reviews we gain insight into the team dynamics as well as to what extent the members contributed to the team effort. We develop and present a graphical model of a capstone project team which highlights participation of individuals during the teaching exercise. The participatory history of the members is visualised using segmented concentric rings. We consider how this visualisation can aid the identification of capstone project teams that are at risk. In our experience the composition of the team and the behaviour of other members in the team may have a marked impact on the behaviour of each individual in the team. We established a team classification in order to model information about teams. We use a statistical clustering method to classify teams. For this we use team profiles that are based on the participatory levels of its members. The team types that emerge from the clustering are used to derive migration models. When we consider migration, we build spring models to visualise the teams through which individuals migrate. We colour code the teams to characterise them according to the team types that were identified during the cluster classification of the teams. Owing to the complexity of the resulting model, only migrations for capstone team members who have worked together during the exercise or for solitary capstone team members are modelled. These models support the identification of areas of interest that warrant further investigation. To conclude, we present our observations from the analysis of team compositions, team types, and team migrations and provide directions for future work and collaborations."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/11231","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/11231","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/2027","fieldValue":" Soft errors have become a serious cause of concern with reducing feature sizes. The ability to accommodate complex, Simultaneous Multithreading (SMT) cores on a single chip presents a unique opportunity to achieve reliable execution, safe from soft errors, with low performance penalties. In this context, we present FluidCheck, a checker architecture that allows highly flexible assignment and migration of checking duties across cores. In this article, we present a mechanism to dynamically use the resources of SMT cores for checking the results of other threads, and propose a variety of heuristics for migration of such checker threads across cores. Secondly, to make the process of checking more efficient, we propose a set of architectural enhancements that reduce power consumption, decrease the length of the critical path, and reduce the load on the Network-on-Chip (NoC). Based on our observations, we design a 16 core system for running SPEC2006 based bag-of-tasks applications. Our experiments demonstrate that fully reliable execution can be attained with a mere 27&percnt; slowdown, surpassing traditional redundant threading based techniques by roughly 42&percnt;."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/2027","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/2027","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/11232","fieldValue":" To prepare graduates for today's work environment, they must be immersed in positive (and perhaps negative) small group experiences in their courses, which will in turn provide a basic understanding of how teams form and develop over time. In the fall of 2009, we started exploring how software development teams form and interact in a computer science college capstone course setting. Our initial findings were presented at ICER 2010 in Aarhus, Denmark. The focus of our research was on the experiences of computer science college course teams as compared and contrasted to the theory of Bruce Tuckman's stages of small group development model, which he characterized as forming, storming, norming, performing, and adjourning. We continued data collection with the computer science capstone course in the fall of 2010 and added an information systems capstone course as well. At the conclusion of the spring 2014 semester, we have collected and analyzed data for a total of 5 academic years from nine cohorts of students taught by five instructors involving 215 students on 51 teams. Each year, participants repeatedly self-assessed their enthusiasm and skill levels over time using a questionnaire by agreeing or disagreeing to statements. The data shows patterns similar to that of Tuckman's model. Since most people find Tuckman's model easy to understand, it may provide an effective tool to teach teamwork and monitor team development. In addition to briefly presenting our empirical findings in this article, we provide a simple conceptualization of Tuckman's model that can be captured in two data points: enthusiasm and skill level. By comparing changes in these two dimensions over time, team development can be tracked through the various Tuckman stages of small group development. We also provide a minicurriculum which can be used to introduce students to Tuckman's model and provide them insight into what leadership style works best in each of the development stages."}