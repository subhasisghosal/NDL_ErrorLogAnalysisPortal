{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18787","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18787","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18788","fieldValue":" We describe the GFUN package which contains functions for manipulating sequences, linear recurrences, or differential equations and generating functions of various types. This article is intended both as an elementary introduction to the subject and as a reference manual for the package."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18788","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18788","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18789","fieldValue":" We describe an implementation of Level-3 BLAS (Basic Linear Algebra Subprograms) based on the use of the matrix-matrix multiplication kernel (GEMM). Blocking techniques are used to express the BLAS in terms of operations involving triangular blocks and calls to GEMM. A principal advantage of this approach is that most manufacturers provide at least an efficient serial version of GEMM so that our implementation can capture a significant percentage of the computer performance. A parameter which controls the blocking allows an efficient exploitation of the memory hierarchy of the various target computers. Furthermore, this blocked version of Level-3 BLAS is naturally parallel. We present results on the ALLIANT FX\/80, the CONVEX C220, the CRAY-2, and the IBM 3090\/VF. For GEMM, we always use the manufacturer-supplied versions. For the operations dealing with triangular blocks, we use assembler or tuned Fortran (using loop-unrolling) codes, depending on the efficiency of the available libraries."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/18789","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/18789","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/18790","fieldValue":" In the last decade, several numerical techniques have been developed to solve time-dependent partial differential equations (PDEs) in one dimension having solutions with steep gradients in space and in time. One of these techniques, a moving-grid method based on a Lagrangian description of the PDE and a smoothed-equidistribution principle to define the grid positions at each time level, has been coupled with a spatial discretization method that automatically discreizes the spatial part of the user-defined PDE following the method of lines approach. We supply two FORTRAN subroutines, CWRESU and CWRESX, which compute the residuals of the differential algebraic equations (DAE) system obtained from semidiscretizing, respectively, the PDE and the set of moving-grid equations. These routines are combined in an enveloping routine SKMRES, which delivers the residuals of the complete DAE system. To solve this stiff, nonlinear DAE system, a robust and efficient time-integrator must be applied, for example, a BDF method such as implemented in the DAE solvers SPRINT [Berzins and Furzeland 1985; 1986; Berzins et al. 1989] and DASSL [Brenan et al. 1989; Petzold 1983]. Some numerical examples are shown to illustrate the simple and effective use of this software interface."}{"fieldName":"dc.title","informationCode":"WARN_TEXT_LENGTH_LARGE","handle":"12345678_acm\/18790","fieldValue":"Algorithm 731: A moving-grid interface for systems of one-dimensional time-dependent partial differential equations"}