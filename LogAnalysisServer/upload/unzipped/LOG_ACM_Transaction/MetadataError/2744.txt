{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/19120","fieldValue":" We present the PFix algorithm for approximating a fixed point of a function f that has arbitrary dimensionality, is defined on a rectangular domain, and is Lipschitz continuous with respect to the infinity norm with constant 1. PFix has applications in economics, game theory, and the solution of partial differential equations. PFix computes an approximation that satisfies the residual error criterion, and can also compute an approximation satisfying the absolute error criterion when the Lipschitz constant is less than 1. For functions defined on all rectangular domains, the worst-case complexity of PFix has order equal to the logarithm of the reciprocal of the tolerance, raised to the power of the dimension. Dividing this order expression by the factorial of the dimension yields the order of the worst-case bound for the case of the unit hypercube. PFix is a recursive algorithm, in that it uses solutions to a d-dimensional problem to compute a solution to a (d &plus; 1)-dimensional problem. A full analysis of PFix may be found in Shellman and Sikorski [2003b], and a C implementation is available through ACM ToMS."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/19120","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/19120","fieldValue":"ACM"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/19121","fieldValue":" The LDL software package is a set of short, concise routines for factorizing symmetric positive-definite sparse matrices, with some applicability to symmetric indefinite matrices. Its primary purpose is to illustrate much of the basic theory of sparse matrix algorithms in as concise a code as possible, including an elegant method of sparse symmetric factorization that computes the factorization row-by-row but stores it column-by-column. The entire symbolic and numeric factorization consists of less than 50 executable lines of code. The package is written in C, and includes a MATLAB interface."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/19121","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/19121","fieldValue":"ACM"}{"fieldName":"dc.contributor.author","informationCode":"WARN_INVALID_PERSON","handle":"12345678_acm\/19122","fieldValue":"LEcuyer, Pierre"}{"fieldName":"dc.description.abstract","informationCode":"ERR_SPACE_AT_EDGE","handle":"12345678_acm\/19122","fieldValue":" Fast uniform random number generators with extremely long periods have been defined and implemented based on linear recurrences modulo 2. The twisted GFSR and the Mersenne twister are famous recent examples. Besides the period length, the statistical quality of these generators is usually assessed via their equidistribution properties. The huge-period generators proposed so far are not quite optimal in this respect. In this article, we propose new generators of that form with better equidistribution and â\u20ACœbit-mixingâ\u20AC? properties for equivalent period length and speed. The state of our new generators evolves in a more chaotic way than for the Mersenne twister. We illustrate how this can reduce the impact of persistent dependencies among successive output values, which can be observed in certain parts of the period of gigantic generators such as the Mersenne twister."}{"fieldName":"dc.publisher","informationCode":"WARN_TEXT_LENGTH_SMALL","handle":"12345678_acm\/19122","fieldValue":"ACM"}{"fieldName":"dc.publisher","informationCode":"WARN_ALL_WORD_UPPER","handle":"12345678_acm\/19122","fieldValue":"ACM"}